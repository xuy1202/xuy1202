<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CYBerATtacK</title>
  <subtitle>cyber security related things</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cybatk.com/"/>
  <updated>2019-04-17T10:39:35.620Z</updated>
  <id>http://cybatk.com/</id>
  
  <author>
    <name>YANG XU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Automatic discovery of malicious websites in NOD</title>
    <link href="http://cybatk.com/2019/04/17/Automatic-discovery-of-malicious-websites-in-NOD/"/>
    <id>http://cybatk.com/2019/04/17/Automatic-discovery-of-malicious-websites-in-NOD/</id>
    <published>2019-04-17T09:59:09.000Z</published>
    <updated>2019-04-17T10:39:35.620Z</updated>
    
    <content type="html"><![CDATA[<p>My Talk on FIRST-TC Amsterdam2019.</p>
<p>Our team operates China’s largest PDNS database. In the hundreds of billions of DNS requests per day, we can see more than 200k NOD (Newly Observed Domain), many of which are malicious websites, including but not limited to porno and gambling, malicious APP promotion, and so on. </p>
<p>These malicious websites deliberately use NOD to constantly change their identities to avoid blocking. At the same time, they will use various methods to evade detection, including simulating normal websites, filling irrelevant content, JS lazy loading, displaying content with pure images, etc. </p>
<p>After analysis, we found that these malicious websites are endless and varied, while the resources be used by them are relatively fixed, such as the same statistical links, same images, embedded JS code segments, download resources, three-party plug-ins with ID, etc. . All of the above can be tagged as “malicious resources”, and normal websites will never load them. Based on this feature, we can use the relationship between the websites and their loading resources to detect various malicious websites in the NOD. </p>
<p>At the same time, there are way too many malicious resources, and they are constantly being added. It is impossible for us to manually search and operate. We have also implemented an automatic discovery process for malicious resources. The malicious websites in NOD are tagged by the old malicious resources, and the new malicious resources are automatically discovered. The whole loop process requires only a small amount of manual review, and the automatic detection of most malicious websites in the full amount of NOD can be realized.</p>
<p>Download: <a href="https://mega.nz/#!k5NmCKoR!JqqLfCI5-vccLDH98q4y1-n6HD9J6BgYvlEqInqKI9g" target="_blank" rel="external">Automatic discovery of malicious websites in NOD.PDF</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My Talk on FIRST-TC Amsterdam2019.&lt;/p&gt;
&lt;p&gt;Our team operates China’s largest PDNS database. In the hundreds of billions of DNS requests pe
    
    </summary>
    
    
      <category term="PDNS" scheme="http://cybatk.com/tags/PDNS/"/>
    
      <category term="NOD" scheme="http://cybatk.com/tags/NOD/"/>
    
      <category term="malicious websites" scheme="http://cybatk.com/tags/malicious-websites/"/>
    
      <category term="porno" scheme="http://cybatk.com/tags/porno/"/>
    
      <category term="gambling" scheme="http://cybatk.com/tags/gambling/"/>
    
  </entry>
  
  <entry>
    <title>Backbone Network Traffic Anomaly Detection</title>
    <link href="http://cybatk.com/2018/03/13/backbone-network-traffic-anomaly-detection/"/>
    <id>http://cybatk.com/2018/03/13/backbone-network-traffic-anomaly-detection/</id>
    <published>2018-03-12T16:07:07.000Z</published>
    <updated>2019-04-17T10:50:31.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>通过持续对流量数据的监测，不断丰富及提取合适的流量特征，以实时检测流量异常<br>几种主要结果：</p>
<ul>
<li>scanmon</li>
<li>ddosmon</li>
<li>暴力破解/垃圾邮件服务器等</li>
</ul>
<h1 id="Pivot模型"><a href="#Pivot模型" class="headerlink" title="Pivot模型"></a>Pivot模型</h1><p>netflow数据是流量的摘要数据，因此通过netflow来检测流量异常也就只能通过摘要统计来提取特征。</p>
<p>一条原始netflow数据形如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2018-03-12_10:56:18 1       TCP     111.75.213.6:80 -&gt;  220.160.22.245:49948    ...PA...	0	5	6888</div></pre></td></tr></table></figure>
<p>这样的数据，只有基本的发生时间，持续时长，来源/目的 的IP：端口等等基本信息。</p>
<p>一般情况下，单条数据无法形成有效的事件鉴别特征，如果我们想深入观察某个IP的状况，我们需要累积一定时间窗口内的与该IP相关的所有数据来观察，比如针对目的IP 189.203.188.074，我们累积一段时间的来源流量可以得出如下统计数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">来源Flow总计：      95(in_fsum)</div><div class="line">来源Package总计：   95(in_psum)</div><div class="line">来源Bytes总计：     113474(in_bsum)</div><div class="line"></div><div class="line">来源包个数统计：    _size=1;_nums=63;1=63;(in_pkgnums)</div><div class="line">来源包大小统计：    _size=28;_nums=63;1500=29;1476=3;1158=2;1063=2;1057=2;847=2;23=2;44=1;1234=1;63=1;1155=1;(in_pkgsize)</div><div class="line">    </div><div class="line">来源IP统计：        _size=51;_nums=63;211.161.099.125=4;117.035.057.189=2;116.226.156.088=2;120.132.146.115=2;112.126.075.213=2;182.050.118.202=2;182.050.118.223=2;183.129.179.044=2;183.129.249.076=2;218.084.015.245=2;223.223.198.100=1;222.223.026.006=1;120.026.120.015=1;222.222.238.164=1;121.043.148.069=1;123.183.161.199=1;222.222.235.237=1;124.116.223.098=1;124.117.235.138=1;124.126.011.177=1;222.072.158.150=1;221.224.036.022=1;219.235.255.070=1;219.072.250.018=1;211.157.139.253=1;218.031.105.251=1;027.191.130.122=1;036.110.211.029=1;043.247.177.226=1;047.094.246.179=1;058.118.178.084=1;058.213.097.129=1;059.045.193.027=1;059.046.059.174=1;060.205.095.069=1;060.205.146.210=1;061.185.004.122=1;101.081.132.185=1;101.095.027.234=1;101.200.162.015=1;106.002.218.068=1;106.014.238.132=1;110.086.000.162=1;111.113.004.106=1;111.113.027.126=1;114.055.052.155=1;114.141.173.038=1;115.159.102.216=1;115.238.035.233=1;116.231.054.207=1;116.231.155.071=1;(in_ipv4)</div><div class="line">来源端口统计：      _size=2;_nums=63;0=33;53=30;(in_port)</div><div class="line"></div><div class="line">PS: </div><div class="line">    1，数值型数据相加</div><div class="line">    2，枚举型数据组织为count-map</div><div class="line">    3，枚举类型count-map前面的 _size表示后面的list总长度，也即为unique(list.keys()), _nums表示sum(list.value())</div></pre></td></tr></table></figure></p>
<p>我们可以看到，来源IP比较分散，但是来源Port固定为53和碎片0端口，同时，很多包都是1500 MTU的满包状态，我们就有充足的信心来说，这是一个DNS反射放大攻击事件，是典型的大量的被利用的反射节点给受害者目的IP发送超过1500的大包导致的流量形态。</p>
<h2 id="双向"><a href="#双向" class="headerlink" title="双向"></a>双向</h2><p>针对一个IP，我们要想观察它是否异常，我们就需要观察它进出两个方向的流量：</p>
<ul>
<li>如果是一个Scanner，可能一段时间内只看到它出去的流量，而看不到流向它的流量</li>
<li>如果是一个被DDoS目标，可能一段时间内只看到它进入的流量，而看不到它出去的流量</li>
</ul>
<h2 id="多层"><a href="#多层" class="headerlink" title="多层"></a>多层</h2><p>同时针对一个IP，观察需要按照IP/Proto/Port来分层观察流量：</p>
<ul>
<li>一个IP上TCP 80端口是正常服务，但是被攻击的是90端口，如果不根据端口来区分观察流量可能会miss</li>
<li>一个IP上TCP 80端口正常服务，但是被攻击的是UDP流量，如果不根据协议来区分观察流量可能会miss</li>
</ul>
<h2 id="多触发"><a href="#多触发" class="headerlink" title="多触发"></a>多触发</h2><p>一般情况下，聚合10分钟的数据，然后整理成所需的格式push到后续流程做检测就够了，但为了数据的时效性以及查全查准，一共有三种检测触发器：</p>
<ul>
<li>STWPop：STW for Sliding Time Window，固定时间窗口流量spike触发检测</li>
<li>EarlyPop：一个IP一个时间窗口内最开始出现的部分流量</li>
<li>AETWPop: AETW for Auto-Extend Time Window， 当一个固定时间窗口内流量太小，自动扩展更多个时间窗口的数据来触发检测</li>
</ul>
<h1 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h1><h2 id="特征概述"><a href="#特征概述" class="headerlink" title="特征概述"></a>特征概述</h2><p>根据我们上述“双向-多层-多触发”模型，任何一个规则条件都可以简单概括为如下：</p>
<blockquote>
<p>针对一个IP/IP-Proto/IP-Proto-Port，其：</p>
<ul>
<li>来源/目的</li>
<li>IP/Proto/Port/Flow/PackageNum/PackageSize/Duration</li>
<li>的unique/sum/dispersion/top</li>
</ul>
<p>是什么</p>
</blockquote>
<p>比如上面我们给出的UDP反射放大攻击的case，我们提到“来源IP比较分散，但是来源Port固定为53和碎片0端口”</p>
<p>这里其实需要映射为三个“与关系”的条件：</p>
<ul>
<li>针对IP 189.203.188.074，其来源IP的dispersion介于[0-5]之间（这里的[0-5]是离散的数值表示）</li>
<li>针对IP 189.203.188.074，其来源Port的Top1等于53</li>
<li>针对IP 189.203.188.074，其来源Port的Top2等于0</li>
</ul>
<h2 id="规则条件说明"><a href="#规则条件说明" class="headerlink" title="规则条件说明"></a>规则条件说明</h2><p>规则条件基本上都是 Calc_DirectionORPosition_Item 的形式。</p>
<h3 id="DirectionPosition"><a href="#DirectionPosition" class="headerlink" title="DirectionPosition"></a>DirectionPosition</h3><ul>
<li>in: 进入的流量</li>
<li>self_as_dst: 自身作为目的的流量</li>
<li>self_as_src: 自身作为源的流量</li>
<li>ot: 出去的流量</li>
</ul>
<p>比如如下5条流量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.1.1.1:1111 -&gt; 2.2.2.2:2221</div><div class="line">1.1.1.1:1112 -&gt; 2.2.2.2:2222</div><div class="line">1.1.1.1:1113 -&gt; 2.2.2.2:2223</div><div class="line">2.2.2.2:2225 -&gt; 3.3.3.3:3331</div><div class="line">2.2.2.2:2226 -&gt; 3.3.3.3:3332</div></pre></td></tr></table></figure></p>
<p>整理成我们的Pivot模型后，DirectionPosition的位置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">            |&lt;--IP 2.2.2.2 Info--&gt;|</div><div class="line">            </div><div class="line">    in       self_as_dst|self_as_src    ot</div><div class="line"></div><div class="line">1.1.1.1:1111 -&gt;  2221:2.2.2.2</div><div class="line">1.1.1.1:1112 -&gt;  2222:2.2.2.2</div><div class="line">1.1.1.1:1113 -&gt;  2223:2.2.2.2</div><div class="line">                      2.2.2.2:2225 -&gt; 3.3.3.3:3331</div><div class="line">                      2.2.2.2:2226 -&gt; 3.3.3.3:3332</div></pre></td></tr></table></figure></p>
<h3 id="Item基本概念："><a href="#Item基本概念：" class="headerlink" title="Item基本概念："></a>Item基本概念：</h3><ul>
<li>duration: flow持续时长，一个5元组flow数据的持续时长</li>
<li>pkgnums：一个flow中的package数，数字越大，说明同一个flow中传输的package越多</li>
<li>pkgsize: 一个flow中的package的平均大小，数字越大说明同一个flow中传输的package越大</li>
<li>peer： IP+Port是一个peer</li>
<li>ipv4：IP</li>
<li>ip_b：IP/16</li>
<li>ip_c：IP/24</li>
<li>port：port</li>
<li>tf: TFlags整体</li>
<li>fin/ack/syn/psh/rst/urg/nul: TFlags中对应的单独的一位</li>
</ul>
<p>所有枚举型都会被整理为ordered-count-map，类如{A:100, B:80, … N:1}，表示A出现100次，B出现80次，。。。 N出现1次，并且按照大小排序，Calc基本都是根据ordered-count-map的计算</p>
<h3 id="Calc基本概念："><a href="#Calc基本概念：" class="headerlink" title="Calc基本概念："></a>Calc基本概念：</h3><ul>
<li>lens：unique(ordered-count-map)</li>
<li>diss：离散度，0-9999，数字越小说明越分散，5为比较分散，10为比较聚集，20以上为非常聚集。这个数字的step要根据现实流量的态势来调整</li>
<li>tops: ordered-count-map的最大的key</li>
<li>top2: ordered-count-map第二大的key</li>
<li>avgs: ordered-count-map中value的均值，或者sum([k * v for k, v in ordered-count-map])/len(ordered-count-map)</li>
<li>span: ordered-count-map中最大最小的key的跨度</li>
<li>rate: 比率，往往是和TFlags结合来确定进出tflags的比率</li>
</ul>
<h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><ul>
<li>lens_in_ipv4: 进入流量中ip的unique个数</li>
<li>diss_ot_port: 出去流量中port的离散程度</li>
<li>tops_in_port: 进入流量中最多的port</li>
<li>avgs_ot_duration: 出去流量持续时长的均值</li>
<li>rate_in_syn: 进入流量的SYN的比例</li>
</ul>
<h2 id="规则实例"><a href="#规则实例" class="headerlink" title="规则实例"></a>规则实例</h2><p>上面说的规则条件都是单个的条件，一条规则实际是多个条件的“与”结合</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1   2024-&gt;attr tag udp@attack@amp_flood_target</div><div class="line">2   2024-&gt;cond prot equal 17</div><div class="line">3   2024-&gt;cond in_locals_spike in_span 15-999999999</div><div class="line">4   2024-&gt;cond in_global_spike in_span 15-999999999</div><div class="line">5   2024-&gt;cond diss_in_port in_span 9-999999999</div><div class="line">6   2024-&gt;cond tops_in_port equal 11211;27960;389;1701;69;111;520;19;1900;123;53;161;137;17;0</div><div class="line">7   2024-&gt;cond top2_in_port equal 11211;27960;389;1701;69;111;520;19;1900;123;53;161;137;17;0</div><div class="line">8   2024-&gt;cond tops_in_pkgsize in_span 1000-999999999</div><div class="line">9   2024-&gt;cond avgs_in_pkgsize in_span 600-999999999</div></pre></td></tr></table></figure>
<p>上面是一条完整的规则，attr表示为规则属性，cond表示为规则条件，按行依次解释为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1   属性：编号为2024的规则是用来匹配“udp@attack@amp_flood_target”事件</div><div class="line">2   条件：proto=17 UDP 协议</div><div class="line">3   条件：短时间周期内（1小时）流量spike 15倍以上</div><div class="line">4   条件：长时间周期内（1天）流量spike 15倍以上</div><div class="line">5   条件：来源端口比较聚集</div><div class="line">6   条件：来源端口top1是常见反射放大端口其一</div><div class="line">7   条件：来源端口top2是常见反射放大端口其一</div><div class="line">8   条件：来源包大小top是1000字节以上的大包</div><div class="line">9   条件：来源包大小的均值是600以上</div></pre></td></tr></table></figure>
<h2 id="规则集"><a href="#规则集" class="headerlink" title="规则集"></a>规则集</h2><p>如上一条规则只能捕获一种或几种类型的“udp@attack@amp_flood_target”事件，但是不能捕获所有的“udp@attack@amp_flood_target”事件。同一种事件，在不同的场景下可能有不同的数据形态，在不同的阶段可能有不同的数据形态，因此针对某一特定事件，我们需要多条规则来覆盖所有的场景，以期达到更高的检出率。多条规则之间是“或”的关系，一次匹配，是匹配所有可疑的规则，只要能命中其中任意一条，我们便可判定为真。</p>
<p>同时，存在某些场景下，不同的事件类型但是数据形态非常相似，只有细微的差别，这时候为了规则运维的方便，有一个priority属性，一条数据匹配到多个规则，只会取priority最大的结果。</p>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>整体数据流程可以简单的分为“分发 - 汇集 - 匹配 - 输出”四个步骤。</p>
<ul>
<li>分发：接受不同采集节点的数据，按照一定规则hash(ip)的方式分发数据到汇集的节点</li>
<li>汇集：持续累积给定时间窗口的数据，整理为上述的模型数据，并依照上述模型中的触发条件，将数据POP出来，给到后续匹配流程做检测</li>
<li>匹配：接受数据，根据给定的规则，检测具体的事件</li>
<li>输出：最终结果事件的输出记录</li>
</ul>
<h2 id="原始数据分发"><a href="#原始数据分发" class="headerlink" title="原始数据分发"></a>原始数据分发</h2><p>我们的模型是要针对某一个IP采集进/出两个方向的流量，而一个IP要么出现在src的位置，要么出现在dst的位置，这就意味着，对于一个 A-&gt;B 的flow，我们既要将其发送给A对应的汇集点，也要将其发送给B对应的汇集点。</p>
<h2 id="原始数据聚合"><a href="#原始数据聚合" class="headerlink" title="原始数据聚合"></a>原始数据聚合</h2><p>聚合的过程是根据数据到达的时间实时进行的，几个要点：</p>
<ul>
<li>默认聚合过程是汇聚到IP-Proto-Port级别，而IP/IP-Proto级别的数据，是在STWPop的时候动态计算的，这样可以节省内存资源消耗</li>
<li>由于有AETWPop的存在，所以一个固定时间窗口过去后，“即没有多到可以直接判断，又没有少到可以忽略的”这部分数据需要留存下来参与下一次的聚合过程</li>
<li>由于数据分布不均的原因，同一个聚合点缓存数据的Flush实际有两个触发条件，一个是配置的TimeWindow的大小，一个是聚合key的最大值。正常情况下都是前者起作用，但后者可以保证即便某个点数据爆炸，系统还能保持稳定运行</li>
</ul>
<h2 id="模型数据匹配"><a href="#模型数据匹配" class="headerlink" title="模型数据匹配"></a>模型数据匹配</h2><p>匹配过程是一个 “white-black-gray” 串联匹配过程</p>
<ul>
<li>white: 用以初步过滤一些明显的不管新的数据</li>
<li>black: 用以匹配出我们已知的恶意事件</li>
<li>gray: 对white/black以外的数据进行历史流量建baseline，然后找出可疑的异常</li>
</ul>
<p>三个节点都是可选的，动态配置。</p>
<h2 id="结果数据输出"><a href="#结果数据输出" class="headerlink" title="结果数据输出"></a>结果数据输出</h2><p>略。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="规则可用属性"><a href="#规则可用属性" class="headerlink" title="规则可用属性"></a>规则可用属性</h2><ul>
<li>tag: 事件类型，基本为proto@event_type@detailed_type 格式</li>
<li>index: 规则组，如果想针对不同的数据过不同的规则集</li>
<li>priority: 优先级，规则默认优先级是0，如果确认一条规则最精确最准，可以设置一个高优先级，这样会覆盖其他规则的匹配</li>
</ul>
<h2 id="规则可用条件"><a href="#规则可用条件" class="headerlink" title="规则可用条件"></a>规则可用条件</h2><p>大部分规则都符合“规则-规则说明”中的格式，部分特殊的加了额外说明</p>
<ul>
<li>accu:         数据聚合级别，3是IP-PROTO-PORT，2是IP-PROTO，1是IP</li>
<li>prot:         protocol 协议</li>
<li>port：        端口</li>
<li>proc_step：   处理阶段，1是STWPop和AETWPop，2是EarlyPop</li>
<li>time_win:     AETW扩展了几个时间窗口</li>
<li></li>
<li>in/ot_fsum：   进/出的flow总计</li>
<li>in/ot_psum：  进/出的package总计</li>
<li>in/ot_bsum：  进/出的bytes总计</li>
<li></li>
<li>diff_flow_io：    进出flow差值</li>
<li>diff_flow_oi：    出进flow差值</li>
<li></li>
<li>in/ot_locals_spike：  进/出短时间窗口（1小时）spike幅度</li>
<li>in/ot_global_spike：  进/出长时间窗口（1天）spike幅度</li>
<li>in/ot_spike：         in/ot_max(locals_spike/globals_spike)</li>
<li>in/ot_spike_type:     flow spike/packages spike/bytes spike</li>
<li></li>
<li>in/ot_ipv4_count_avg:     进/出IP的平均出现次数</li>
<li>in/ot_ipv4_count_top：    进/出IP中出现最多的次数</li>
<li></li>
<li>rate_io_avgs_pkgsize：    进/出包大小比率</li>
<li>tops_nzport_io_equal：    进/出流量中最大的非0端口是否一致</li>
<li></li>
<li>此处省略100条条件</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;通过持
    
    </summary>
    
    
      <category term="backbone network" scheme="http://cybatk.com/tags/backbone-network/"/>
    
      <category term="ddos" scheme="http://cybatk.com/tags/ddos/"/>
    
      <category term="scanner" scheme="http://cybatk.com/tags/scanner/"/>
    
  </entry>
  
  <entry>
    <title>PDNS 系统设计实现之二：PDNS白画像</title>
    <link href="http://cybatk.com/2017/05/26/pdns-white/"/>
    <id>http://cybatk.com/2017/05/26/pdns-white/</id>
    <published>2017-05-26T15:27:22.000Z</published>
    <updated>2017-05-27T12:04:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇<a href="/2017/03/13/pdns-process-notes/">《PDNS系统设计实现总结》</a>中，简单记录了一下我们当前PDNS系统的结构关键点。但是，那篇里面主要提及的点，都是如何找出异常，对于PDNS系统而言，还有一个重要功能是对正常业务的刻画，今儿补上。</p>
<p>做安全分析，着眼点都是异常是什么，为什么要通过DNS来对业务做画像呢？其实这个道理和杀毒软件的演进思路大同小异，因为异常是多变的，难以完全描述，甚或有时候难以捕捉，因此直接做黑名单黑规则，总有漏网之鱼，且规则要紧跟异常，否则漏的就越来越多。而从白名单的角度，业务的稳定性远远高于异常，因此如果能较为精确的梳理出业务的白画像，那异常的捕捉就能变得更为简单。</p>
<p>直接上图。</p>
<p><img src="/2017/05/26/pdns-white/pdns-white.png" alt="数据流程图"></p>
<p>上述数据流程图中，从最开始数据接入归一化，自上而下分三路：左路是一般数据处理入库，大部分流程在上一篇中已经提及，是上一篇的重点；右路是实时异常检测，在上一篇中略有提及；中路就是今天的主角，如何利用PDNS系统来形成对业务的精确画像（Profile）。而中路中，数据处理入库和左路没有太大区别，业务的白画像数据，和左路数据的最大的改进就是过滤掉所有黑数据，因此重点就是图中着重标出的 Dynamic Filter 部分。</p>
<p>先说一下睡在 Dynamic Filter 左边的兄弟 Static Filter。</p>
<ul>
<li>无效数据: 比如*.arpa等无意义数据</li>
<li>无效纪录：比如SOA等无意义记录</li>
<li>Pairing 失败：一条有效的PDNS数据比如要query和response的有效pairing，否则数据可能是伪造的</li>
<li>响应为error：数据无用</li>
<li>请求域名无效：有些请求的域名是无效的，但是有些open resolver仍旧会回复有效数据，这些意外的数据也应该过滤掉</li>
<li>请求域名有效，响应看似有效，但是实际无效：比如一个example.com CNAME 到 not.exist.bla，如果不仔细教研rdata部分，很容易就会混入很多无效数据</li>
<li>CDN第二跳域名: 有些CND的子域名不是固定的，变动特别频繁，这部分数据如果完全记录，那也将是数据灾难</li>
</ul>
<p>上述之所以归为Static Filter，是因为这些过滤的条件是简单易判断可以写死的条件，无需其他过程的介入和交互。那 Dynamic Filter 要过滤哪些数据呢？</p>
<ul>
<li>Abused DNS：spamhaus, dans tunnle CC指令，数据传送等等非正常DNS使用的</li>
<li>Disposable domain：两个关键 cloudfront greencompute</li>
<li>Sinkhole: 被sinkhole的数据只对安全分析有作用，绝对不可能是正常业务</li>
<li>DGA ／ FustFlux等黑产域名</li>
<li>DDNS动态域名: 这些域名数数count就好了</li>
<li>黑帽SEO流量站以及站群带来的批量二级子域名</li>
<li>子域名暴力破解 ＋ 泛解析</li>
<li>域名暴力破解 ＋ gTLD泛解析</li>
<li>DNS benchmark</li>
<li>Chrome 随机域名探测</li>
<li>随机前缀攻击</li>
<li>DNS反射放大之A纪录填充</li>
<li>安全防护DNS流量引流, CNAMER到防护域名甚或无效域名，A到内网地址等</li>
<li>DNS suffix</li>
<li>DNS劫持结果，黑产＋你熟悉的G／F／W</li>
<li>各种异常：互联网是程序员写出来的，有程序员的地方就会有BUG，举个栗子：有些域名做防护，会将请求的域名CNAME到一个随机子域名，比如把example.com CNAME 到 aaaabbbbcccc.example.com，后续根据客户端有没有请求该子域名，来判断客户端是不是正常。如果有了该子域名的请求，则认为客户端是真实的，再将 aaaabbbbcccc.example.com CNAME 回真正的地址，实现正常请求。但是现实中，实现的方法以及判读逻辑可能有问题，导致子域名 aaaabbbbcccc.example.com 的请求过来，又一次被CNAME到更深层级的子域名，比如 ddddeeeeffff.aaaabbbbcccc.example.com, 又要进行一次判断，如此往复。因此，我们能看到一个 ping-pang 的DNS请求，请求的域名越来越长，包越来越大，直到超出 DNS 域名规范的限制。这个过程，防护设备不但没有起到防护的作用，甚或间接的造成了DDoS攻击，整个请求过程的域名都是我们要过滤掉的。</li>
</ul>
<p>上面这一坨，每个点拿出来想做好，都可能是一项烦耗的工程。这些过滤，依赖于右路实时异常检测的结果，需要实时监测到这些异常，然后实时通知 Dynamic Filter过滤掉。这对实时异常检测的要求比较高。当然，这部分工作完全可以在最终入库前做，将入库时间延后，等各种异常汇集后再做，但是这样，对应的业务白画像的DB White也就不是实时可用的了，这个可以根据自己的需求权衡。</p>
<p>而且，实时异常检测的时候，不可避免会有漏判误判，最下方的 Off-Line Analysis 的产出是立足于黑白灰全局数据的安全分析，也是定期复盘，一要纠正数据，而要提供更多的模型及规则给实时异常检测，形成一个 检测-过滤-验证-检测 的环路，不断优化模型，精细梳理规则，以期实现一个精准度不断提高的PDNS白画像。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇&lt;a href=&quot;/2017/03/13/pdns-process-notes/&quot;&gt;《PDNS系统设计实现总结》&lt;/a&gt;中，简单记录了一下我们当前PDNS系统的结构关键点。但是，那篇里面主要提及的点，都是如何找出异常，对于PDNS系统而言，还有一个重要功能是对正常业
    
    </summary>
    
    
      <category term="PDNS" scheme="http://cybatk.com/tags/PDNS/"/>
    
      <category term="DNS" scheme="http://cybatk.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>pymongo find操作的limit限制对返回的cursor.count() 默认不生效</title>
    <link href="http://cybatk.com/2017/04/27/mongo-find-count/"/>
    <id>http://cybatk.com/2017/04/27/mongo-find-count/</id>
    <published>2017-04-27T11:47:33.000Z</published>
    <updated>2017-04-27T10:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们有一个web服务的mongo连接池，对每一个mongo find查询，我们会在日志中记录查询条件及其返回数据的count，从后可以方便的后续定位问题。<br>最开始使用的count方法是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">result = monger.find(cond);</div><div class="line">count  = result.count()</div></pre></td></tr></table></figure>
<p>出问题了，mongo后台记录了很多command: count慢查日志，在有这些慢查的时候，mongo库性能急剧下降，几乎不可用。</p>
<p>排查代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">"0x00 len(list(mongor.table.find(cond))) COUNT: "</span>, len(list(mongor.table.find(cond)))</div><div class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(mongor.table.find(cond, fields=[<span class="string">"types"</span>])):</div><div class="line">    <span class="keyword">print</span> <span class="string">"\t"</span>, i, v</div><div class="line"><span class="keyword">print</span></div><div class="line"><span class="keyword">print</span> <span class="string">"0x01 mongor.table.find(cond, limit=1).count() COUNT: "</span>, mongor.table.find(cond, limit=<span class="number">1</span>).count()</div><div class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(mongor.table.find(cond, fields=[<span class="string">"types"</span>], limit=<span class="number">1</span>)):</div><div class="line">    <span class="keyword">print</span> <span class="string">"\t"</span>, i, v</div><div class="line"><span class="keyword">print</span></div><div class="line"><span class="keyword">print</span> <span class="string">"0x02 mongor.table.find(cond).limit(1).count() COUNT: "</span>, mongor.table.find(cond).limit(<span class="number">1</span>).count()</div><div class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(mongor.table.find(cond, fields=[<span class="string">"types"</span>]).limit(<span class="number">1</span>)):</div><div class="line">    <span class="keyword">print</span> <span class="string">"\t"</span>, i, v</div><div class="line"><span class="keyword">print</span></div><div class="line"><span class="keyword">print</span> <span class="string">"0x03 mongor.table.find(cond, limit=1).count(True) COUNT: "</span>, mongor.table.find(cond, limit=<span class="number">1</span>).count(<span class="keyword">True</span>)</div><div class="line"><span class="keyword">print</span></div><div class="line"><span class="keyword">print</span> <span class="string">"0x04 mongor.table.find(cond).limit(1).count(True) COUNT: "</span>, mongor.table.find(cond).limit(<span class="number">1</span>).count(<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>执行结果如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">0x00 len(list(mongor.table.find(cond))) COUNT:  2</div><div class="line">    0 &#123;u<span class="string">'_id'</span>: ObjectId(<span class="string">'58fcb2c52d616749494d9cb9'</span>), u<span class="string">'types'</span>: u<span class="string">'udp@attack@simple_flood_target'</span>&#125;</div><div class="line">    1 &#123;u<span class="string">'_id'</span>: ObjectId(<span class="string">'58fcb0ef2d616749494d98df'</span>), u<span class="string">'types'</span>: u<span class="string">'udp@attack@simple_flood_target'</span>&#125;</div><div class="line"></div><div class="line">0x01 mongor.table.find(cond, <span class="built_in">limit</span>=1).count() COUNT:  2</div><div class="line">    0 &#123;u<span class="string">'_id'</span>: ObjectId(<span class="string">'58fcb2c52d616749494d9cb9'</span>), u<span class="string">'types'</span>: u<span class="string">'udp@attack@simple_flood_target'</span>&#125;</div><div class="line"></div><div class="line">0x02 mongor.table.find(cond).limit(1).count() COUNT:  2</div><div class="line">    0 &#123;u<span class="string">'_id'</span>: ObjectId(<span class="string">'58fcb2c52d616749494d9cb9'</span>), u<span class="string">'types'</span>: u<span class="string">'udp@attack@simple_flood_target'</span>&#125;</div><div class="line"></div><div class="line">0x03 mongor.table.find(cond, <span class="built_in">limit</span>=1).count(True) COUNT:  1</div><div class="line"></div><div class="line">0x04 mongor.table.find(cond).limit(1).count(True) COUNT:  1</div></pre></td></tr></table></figure></p>
<p>可以看到</p>
<ul>
<li>0x00 的情况，就是针对结果集数据进行在业务层自己算count，一共两条数据</li>
<li>0x01 的情况，limit在find内，对cursor的count不起作用，尽管最终输出一条结果，但是count仍然是2条</li>
<li>0x02 的情况，limit在find外，结果同0x01, limit对count不起作用</li>
<li>0x03 &amp; 0x04, 不管limit在哪，count的时候，执行加上True参数，limit条件就可以起作用了, True参数对应的是applySkipLimit, 是否考虑skip和limit的影响，默认为False，具体参见 <a href="https://docs.mongodb.com/manual/reference/method/cursor.count/" target="_blank" rel="external">文档 cursor.count</a></li>
</ul>
<p>因此，我们之前的查询，尽管find的时候设置了limit，但是由于cursor.count(default: False)的存在，仍然相当于把cursor对应的满足条件的所有数据都遍历一遍。假定一个查询条件，库中满足的结果有很多很多，那这个count就带来了慢查，拖慢了整个mongo库。</p>
<p>总结：</p>
<ul>
<li>尽管count提供了applySkipLimit参数，但是默认为False为败笔，因为count在limit之后，这个默认和前后顺序关系逻辑不一致</li>
<li>如果结果注定是要返回的，最好就直接对结果集算count，不要用curosr.count()，省一次command: count操作</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们有一个web服务的mongo连接池，对每一个mongo find查询，我们会在日志中记录查询条件及其返回数据的count，从后可以方便的后续定位问题。&lt;br&gt;最开始使用的count方法是&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab
    
    </summary>
    
    
      <category term="pymongo" scheme="http://cybatk.com/tags/pymongo/"/>
    
      <category term="mongo" scheme="http://cybatk.com/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>加速正则表达式匹配过程</title>
    <link href="http://cybatk.com/2017/04/05/re2-regex-speed-up/"/>
    <id>http://cybatk.com/2017/04/05/re2-regex-speed-up/</id>
    <published>2017-04-05T15:25:52.000Z</published>
    <updated>2017-04-14T04:49:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们有个小系统，要load几十亿域名，支持字符串查询／正则模式匹配等等各种查找方式，以期找到满足模式的域名进行后续分析。</p>
<p>普通的正则过程会比较慢，尤其正则越复杂，性能下降会很严重。当前load数据有50亿到100亿之间，一个复杂正则可能需要耗费几十分钟才能跑完。</p>
<p>想到一个优化方法</p>
<ul>
<li>load数据的过程中，预先计算每个域名的组成，【0-9a-z._-】分别对应到一个bit，一个int64的整数足够</li>
<li>查询时，把正则中固定字符串提取出来，算固定字符串的组成，正则匹配之前，先看要检查的域名的对应的组成int64的位与是否能cover正则表达式的组成int64</li>
</ul>
<p>域名的组成很少会把所有的字符都用到，对于特定的模式，能有overlap的域名只是一小部分，而上述的位与检查会非常迅速，所以可以大大提高匹配过程的效率。粗略估算，提升在5倍左右，对于正则表达式，如果能提供的固定字符串越多，匹配越快，如果完全不包含固定字符串，那就退化到和之前一样了。</p>
<p>问题来了，python里面 re.compile(pattern, 128）会把一个pattern对应的解析后结果展示出来，re2没有这个接口，我们得自己添加。</p>
<p>re2/re2.h 给 RE2 类添加<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> ... ...</div><div class="line">+<span class="keyword">class</span> Regexp &#123;</div><div class="line">+    <span class="keyword">public</span>:</div><div class="line">+        <span class="function"><span class="built_in">string</span> <span class="title">Dump</span><span class="params">()</span></span>;</div><div class="line">+&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> RE2&#123;</div><div class="line">    ... ...</div><div class="line">+    <span class="function"><span class="built_in">string</span> <span class="title">RegexpDump</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> Regexp()-&gt;Dump(); &#125;</div><div class="line">    ... ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Dump方法在re2/regex.h是有的，不过没有给出实现。在re2/testing/下有类似的dump实现，不过dump出来的字符串是一坨不好看，我们修改为如下</p>
<p>re2/regexp.cc，添加到文件最后<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* kOpcodeNames[] = &#123;</div><div class="line">  <span class="string">"bad "</span>,</div><div class="line">  <span class="string">"no "</span>,</div><div class="line">  <span class="string">"emp "</span>,</div><div class="line">  <span class="string">"CHR "</span>,</div><div class="line">  <span class="string">"STR "</span>,</div><div class="line">  <span class="string">"PATTERN "</span>,</div><div class="line">  <span class="string">"alt "</span>,</div><div class="line">  <span class="string">"0-ANY "</span>,</div><div class="line">  <span class="string">"1-ANY "</span>,</div><div class="line">  <span class="string">"0-1 "</span>,</div><div class="line">  <span class="string">"REPEAT "</span>,</div><div class="line">  <span class="string">"SUB"</span>,</div><div class="line">  <span class="string">"dot "</span>,</div><div class="line">  <span class="string">"byte "</span>,</div><div class="line">  <span class="string">"bol "</span>,</div><div class="line">  <span class="string">"eol "</span>,</div><div class="line">  <span class="string">"wb "</span>,   <span class="comment">// kRegexpWordBoundary</span></div><div class="line">  <span class="string">"nwb "</span>,  <span class="comment">// kRegexpNoWordBoundary</span></div><div class="line">  <span class="string">"BOT "</span>,</div><div class="line">  <span class="string">"EOT "</span>,</div><div class="line">  <span class="string">"IN "</span>,</div><div class="line">  <span class="string">"match "</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DumpRegexpAppending</span><span class="params">(Regexp* re, <span class="built_in">string</span>* s, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (re-&gt;op() &lt; <span class="number">0</span> || re-&gt;op() &gt;= arraysize(kOpcodeNames)) &#123;</div><div class="line">    StringAppendF(s, <span class="string">"op%d"</span>, re-&gt;op());</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">switch</span> (re-&gt;op()) &#123;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> kRegexpStar:</div><div class="line">      <span class="keyword">case</span> kRegexpPlus:</div><div class="line">      <span class="keyword">case</span> kRegexpQuest:</div><div class="line">      <span class="keyword">case</span> kRegexpRepeat:</div><div class="line">        <span class="keyword">if</span> (re-&gt;parse_flags() &amp; Regexp::NonGreedy)</div><div class="line">          s-&gt;append(<span class="string">"n"</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(! s-&gt;empty())&#123;</div><div class="line">        s-&gt;append(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;level; ++i)&#123;</div><div class="line">        s-&gt;append(<span class="string">"  "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    s-&gt;append(kOpcodeNames[re-&gt;op()]);</div><div class="line">    <span class="keyword">if</span> (re-&gt;op() == kRegexpLiteral &amp;&amp; (re-&gt;parse_flags() &amp; Regexp::FoldCase)) &#123;</div><div class="line">      Rune r = re-&gt;rune();</div><div class="line">      <span class="keyword">if</span> (<span class="string">'a'</span> &lt;= r &amp;&amp; r &lt;= <span class="string">'z'</span>)</div><div class="line">        s-&gt;append(<span class="string">"fold"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (re-&gt;op() == kRegexpLiteralString &amp;&amp; (re-&gt;parse_flags() &amp; Regexp::FoldCase)) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re-&gt;nrunes(); i++) &#123;</div><div class="line">        Rune r = re-&gt;runes()[i];</div><div class="line">        <span class="keyword">if</span> (<span class="string">'a'</span> &lt;= r &amp;&amp; r &lt;= <span class="string">'z'</span>) &#123;</div><div class="line">          s-&gt;append(<span class="string">"fold"</span>);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  s-&gt;append(<span class="string">"&#123;"</span>);</div><div class="line">  <span class="keyword">switch</span> (re-&gt;op()) &#123;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> kRegexpEndText:</div><div class="line">      <span class="keyword">if</span> (!(re-&gt;parse_flags() &amp; Regexp::WasDollar)) &#123;</div><div class="line">        s-&gt;append(<span class="string">"\\z"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> kRegexpLiteral: &#123;</div><div class="line">      Rune r = re-&gt;rune();</div><div class="line">      <span class="keyword">char</span> buf[UTFmax+<span class="number">1</span>];</div><div class="line">      buf[runetochar(buf, &amp;r)] = <span class="number">0</span>;</div><div class="line">      s-&gt;append(buf);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> kRegexpLiteralString:</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re-&gt;nrunes(); i++) &#123;</div><div class="line">        Rune r = re-&gt;runes()[i];</div><div class="line">        <span class="keyword">char</span> buf[UTFmax+<span class="number">1</span>];</div><div class="line">        buf[runetochar(buf, &amp;r)] = <span class="number">0</span>;</div><div class="line">        s-&gt;append(buf);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> kRegexpConcat:</div><div class="line">    <span class="keyword">case</span> kRegexpAlternate:</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re-&gt;nsub(); i++)&#123;</div><div class="line">          DumpRegexpAppending(re-&gt;sub()[i], s, level+<span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> kRegexpStar:</div><div class="line">    <span class="keyword">case</span> kRegexpPlus:</div><div class="line">    <span class="keyword">case</span> kRegexpQuest:</div><div class="line">      DumpRegexpAppending(re-&gt;sub()[<span class="number">0</span>], s, level+<span class="number">1</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> kRegexpCapture:</div><div class="line">      <span class="keyword">if</span> (re-&gt;name()) &#123;</div><div class="line">        s-&gt;append(*re-&gt;name());</div><div class="line">        s-&gt;append(<span class="string">":"</span>);</div><div class="line">      &#125;</div><div class="line">      DumpRegexpAppending(re-&gt;sub()[<span class="number">0</span>], s, level+<span class="number">1</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> kRegexpRepeat:</div><div class="line">      s-&gt;append(StringPrintf(<span class="string">"%d,%d "</span>, re-&gt;min(), re-&gt;max()));</div><div class="line">      DumpRegexpAppending(re-&gt;sub()[<span class="number">0</span>], s, level+<span class="number">1</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> kRegexpCharClass: &#123;</div><div class="line">      <span class="built_in">string</span> sep;</div><div class="line">      <span class="keyword">for</span> (CharClass::iterator it = re-&gt;cc()-&gt;begin();</div><div class="line">           it != re-&gt;cc()-&gt;end(); ++it) &#123;</div><div class="line">        RuneRange rr = *it;</div><div class="line">        s-&gt;append(sep);</div><div class="line">        <span class="keyword">if</span> (rr.lo == rr.hi)</div><div class="line">          s-&gt;append(StringPrintf(<span class="string">"%#x"</span>, rr.lo));</div><div class="line">        <span class="keyword">else</span></div><div class="line">          s-&gt;append(StringPrintf(<span class="string">"%#x-%#x"</span>, rr.lo, rr.hi));</div><div class="line">        sep = <span class="string">" "</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>((*s)[s-&gt;size()<span class="number">-1</span>] == <span class="string">'&#125;'</span>)&#123;</div><div class="line">      s-&gt;append(<span class="string">"\n"</span>);</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;level; ++i)&#123;</div><div class="line">          s-&gt;append(<span class="string">"  "</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  s-&gt;append(<span class="string">"&#125;"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">string</span> Regexp::Dump() &#123;</div><div class="line">  <span class="built_in">string</span> s;</div><div class="line">  DumpRegexpAppending(<span class="keyword">this</span>, &amp;s, <span class="number">0</span>);</div><div class="line">  <span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样做个小程序</p>
<p>main.cc<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;argc; ++i)&#123;</div><div class="line">        <span class="keyword">auto</span> line = <span class="built_in">std</span>::<span class="built_in">string</span>(argv[i]);</div><div class="line">        re2::<span class="function">RE2 <span class="title">p</span><span class="params">(line)</span></span>;</div><div class="line">        <span class="keyword">if</span>(p.ok())&#123;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt;&gt;&gt; "</span> &lt;&lt; line &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> pcc = p.RegexpDump();</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pcc &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt;&gt;&gt; "</span> &lt;&lt; line &lt;&lt; <span class="string">" Parse error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[xuyang@dev:/secret/path/]$ ./repattern.exe <span class="string">'^hello[0-9]&#123;1,3&#125;\.[abc_.-]&#123;5,6&#125;world$'</span></div><div class="line">&gt;&gt;&gt; ^hello[0-9]&#123;1,3&#125;\.[abc_.-]&#123;5,6&#125;world$</div><div class="line">PATTERN &#123;</div><div class="line">  BOT &#123;&#125;</div><div class="line">  STR &#123;hello&#125;</div><div class="line">  REPEAT &#123;1,3</div><div class="line">    IN &#123;0x30-0x39&#125;</div><div class="line">  &#125;</div><div class="line">  CHR &#123;.&#125;</div><div class="line">  REPEAT &#123;5,6</div><div class="line">    IN &#123;0x2d-0x2e 0x5f 0x61-0x63&#125;</div><div class="line">  &#125;</div><div class="line">  STR &#123;world&#125;</div><div class="line">  EOT &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述STR／CHR的部分就是我们关心的“一个正则中固定字符串”的部分，这里是“hello.”，将其映射到一个uint64 for pattern。<br>正则匹配之前，先通过一个位与运算判断上面的uint64 for pattern是否被包含与uint64 for string, 不被包含的就说明原始字符串肯定不会含有hello.对应的所有字符，也就肯定不可能被正则匹配过程命中，直接忽略掉匹配过程，加速整体匹配性能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们有个小系统，要load几十亿域名，支持字符串查询／正则模式匹配等等各种查找方式，以期找到满足模式的域名进行后续分析。&lt;/p&gt;
&lt;p&gt;普通的正则过程会比较慢，尤其正则越复杂，性能下降会很严重。当前load数据有50亿到100亿之间，一个复杂正则可能需要耗费几十分钟才能跑完
    
    </summary>
    
    
      <category term="cpp" scheme="http://cybatk.com/tags/cpp/"/>
    
      <category term="正则" scheme="http://cybatk.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="re2" scheme="http://cybatk.com/tags/re2/"/>
    
      <category term="性能" scheme="http://cybatk.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>RSD 随机子域名攻击</title>
    <link href="http://cybatk.com/2017/03/25/rsd-attack/"/>
    <id>http://cybatk.com/2017/03/25/rsd-attack/</id>
    <published>2017-03-25T09:58:01.000Z</published>
    <updated>2017-03-29T06:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/2017/03/25/rsd-attack/rsd.example.png" class="full-image" title="A Real Case of RSD Attack"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<p>RSD, random sub domain [attack]， 也可称为 PRSD， P for Pseudo，因为所谓的随机数生成算法是“伪随机”。</p>
<h1 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h1><p>假定我们想攻击example.com，让其不能正常提供服务，我们可以构造大量的虚假子域名请求，比如:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">aaaaaaa.example.com</div><div class="line">aaaaaab.example.com</div><div class="line">...</div><div class="line">aaaaaaz.example.com</div><div class="line">aaaaaba.example.com</div><div class="line">...</div><div class="line">zzzzzzz.example.com</div></pre></td></tr></table></figure>
<p>这些FQDN都是构造出来的，真实业务不存在的域名，因此接收到这些请求的公共DNS服务器, 例如 114.114.114.114，会根据请求开始递归请求过程，将上述请求转到 example.com 的权威NS服务器, 例如 ns.example.com。</p>
<p>以上伪造的子域名模式是［a-z］7个字母的定长组合，一共有 26 ** 7 = 8031810176个，想象一下，这么多伪造请求如果在10分钟内发出去，可能发生的事情：</p>
<ul>
<li>公共DNS服务器 114.114.114.114 缓存可能被撑爆，可能无法处理正常请求</li>
<li>114.114.114.114 到 ns.example.com 的路由线路中间某节点带宽被占满</li>
<li>ns.example.com 处理不了如此多的请求，导致无法处理正常请求</li>
<li>甚或，到达example.com 的流量只有20G，但是所在IDC认为流量太大，强制将example.com下线来自保（没开玩笑）</li>
</ul>
<p>这些可能只要满足一个，就有相当大部分或者所有人，在一定时间内都无法正常访问 example.com，攻击成功。</p>
<p>上面伪造请求我用了连续字符串空间的子域名来说明，实际攻击中会用各种随机算法来生成定长／变长的，字母／数字／混合的各种子域名来进行攻击，所以被称为 RSD 。</p>
<div class="note default"><p>另：DNS 请求是基于 UDP 的，UDP 没法验证来源，也就是说 DNS 的请求是可以伪造来源的，如果攻击者伪造子域名请求的来源 IP 为 ns.example.com 的 IP 或者同 IDC 的 IP 会如何？</p>
</div>
<h1 id="攻击现状"><a href="#攻击现状" class="headerlink" title="攻击现状"></a>攻击现状</h1><p>天天有，几乎时时刻刻都有。按照我们当前检测到的结果，每天少则几个，多则十几个站点会遭受这种攻击，持续时长从十几分钟到十几天甚或更久都有可能。</p>
<p>随机子域名模式生成基本就两个维度，固定pattern + 随机pattern，随机pattern又被两个因素来决定：长度 + 字符集。长度是固定的还是随机的？长度如果随机，随机范围是多少？字符随机范围是什么？字母还是数字还是混合，甚或是特定的自选字符集？</p>
<h2 id="最常见的前缀模式"><a href="#最常见的前缀模式" class="headerlink" title="最常见的前缀模式"></a>最常见的前缀模式</h2><ul>
<li>两次rand：一次rand选择一个随机长度，后续每次rand选择一个随机字符</li>
<li>固定长度，随机字母/字母+数字</li>
<li>特定模式：比如d(-[0-9]{2,7}){3,3}-d</li>
</ul>
<h2 id="攻击规模"><a href="#攻击规模" class="headerlink" title="攻击规模"></a>攻击规模</h2><p>攻击发生时，基本都是 百万／s 的请求量。看题图，上面这个攻击有意思在于分了几个阶段：</p>
<ul>
<li>攻击前：5分钟访问量只有几百</li>
<li>攻击阶段1: 5分钟访问量迅速升到百万, 并且持续了8个小时</li>
<li>攻击阶段2: 攻击者发现没有达到预想的效果，攻击升级，5分钟访问量升到了150w，持续了1个小时</li>
<li>攻击暂停: 攻击者可能发现了自己的一个操作错误，暂停了一下</li>
<li>攻击阶段3: 攻击重新开始，此时5分钟访问量稳步升到了200w，并持续中</li>
<li>后续：写这行字时，正在发生。。。</li>
</ul>
<h2 id="攻击目标"><a href="#攻击目标" class="headerlink" title="攻击目标"></a>攻击目标</h2><p>利益驱动，so…</p>
<h1 id="实时检测方法"><a href="#实时检测方法" class="headerlink" title="实时检测方法"></a>实时检测方法</h1><p>知道了RSD的原理，做检测更多的是需要两个前提: 有数据 + 工程能力。</p>
<p>数据参照前一篇 <a href="/2017/03/13/pdns-process-notes/">《PDNS系统设计实现总结》</a>，我们需要的是3，至少是2的位置。</p>
<p>检测方法：</p>
<ul>
<li>0x00 请求计数：对所有级别的FQDN做计数，类似trie-tree的结构，域名反转, www.baidu.com 反转为 com.baidu.www，按点分割，记录各级的count。RSD如果发生，父级域名的count必然有一个明显的spike，比如攻击为 xxxxx.www.baidu.com，那www.baidu.com的访问量会有一个明显的上升。这一步不是必须，但之所以要做这个判断是因为后续过程计算会很重，而这一个前置步骤，可以将大部分正常数据放过，省去不必要的计算</li>
<li>0x01 子域名计数：RSD一大特征就是构造很多很多随机子域名，因此统计子域名个数是最重要的特征。可以使用hyperloglog算法，redis中源码写的不错，可以借鉴</li>
<li>0x02 子域名模式判断：子域名多不见得是RSD攻击，还有可能是各种数据通道，子域名爆破等等情况。要判定为RSD，那就必须要对子域名模式进行分析判定。每分钟几十万的子域名，没必要都记录，阶梯抽样缩减到千级别即可。判断构成的随机性，也可以根据已知的模式判断匹配程度，前者可以来检测所有未知的RSD，后者的好处是可以和已知的bot家族关联到一起。随机性的判定，建议使用分词，不要用熵。</li>
</ul>
<h1 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h1><p>我们没有防御的责任和位置，因此防御我们没有做，就算有想法，可能有坑，所以暂且不表。</p>
<p>等哪天如果做了，有了被证实的经验，我可能会回来填坑【doge脸】</p>
<hr>
<div class="note default"><p>我们部门小伙伴还专门分析过 Bot Elknot 的RSD的情况，做的很好，感兴趣的可以看看 <a href="https://www.virusbulletin.com/uploads/pdf/conference_slides/2016/Liu_Wang-vb-2016-TheElknotDDoSBotnetsWeWatched.pdf" target="_blank" rel="external">vb-2016-TheElknotDDoSBotnetsWeWatched.pdf</a></p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/2017/03/25/rsd-attack/rsd.examp
    
    </summary>
    
    
      <category term="DDoS" scheme="http://cybatk.com/tags/DDoS/"/>
    
      <category term="RSD" scheme="http://cybatk.com/tags/RSD/"/>
    
  </entry>
  
  <entry>
    <title>PDNS系统设计实现总结</title>
    <link href="http://cybatk.com/2017/03/13/pdns-process-notes/"/>
    <id>http://cybatk.com/2017/03/13/pdns-process-notes/</id>
    <published>2017-03-13T13:45:40.000Z</published>
    <updated>2017-04-27T10:38:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>从14年中开始，我们团队开始做中国最大的PassiveDNS系统，并在基本的PDNS系统之上，衍生了很多的额外的功能服务。当前我们有:</p>
<ul>
<li>flint: 基本的passive dns系统，domain-ip ip-domain的映射关系的历史记录查询. <a href="https://passivedns.cn" target="_blank" rel="external">passivedns.cn</a>，只对安全公司可信分析人员开放</li>
<li>flint.real: flint是所有历史记录的数据，这个flint.real则是最近一小时内的domain-ip/ip-domain的映射关系，数据实时分析的时候，实时的关系更重要</li>
<li>domain_stat: 域名访问统计，可以区分不同的请求类型，不同的返回类型，不同的数据节点</li>
<li>pdns_capture: 给定过滤条件，实时抓取最新的DNS记录数据</li>
<li>dtree：域名查找服务，给定一个模式，可以是子域名，可以是wildcard，可以是正则表达式，快速的在所有FQDN中查找符合模式的域名。很多安全分析文章都会对敏感域名打码，对我们而言，几乎天下无码。</li>
</ul>
<!--
* domain_access/client_access: 查询一段时间内，一个domain被哪些client访问，一个client都访问了哪些domain，交叉访问的记录数据
* profile_domain/profile_client/profile_dnserv: domain/client/dnserv的profile数据，比如一个域名在一个时间点，被谁访问，来自哪些原端口，tid分别是多少，请求类型的分布是如何，返回的数据是如何分布的，响应这个domain 的dnserv都有哪些等等。在此基础上，可以实时判定诸如RSD攻击，子域名爆破，反射放大等各种安全事件
-->
<p>这是我在当前团队做的第一个服务，2年多来也一直在改进维护，除了前端接入原始数据是同事在做，中间的数据流，处理分析，入库，查询接口，都是我在做。其中艰辛很多，也感觉学到很多，资源不够如何权衡妥协，网络不如意服务如何调度分派，数据放量如何动态扩展，很多细节如果不看代码都要忘记了。刚好年初数据放量，重新梳理代码优化了一下性能，趁机聊作记录以备忘。</p>
<div class="note danger"><p><strong>考虑到用户隐私，所有涉及client ip的地方要做混淆, 混淆后的数据可用于数据的关联</strong></p>
</div>
<div class="note default"><p>出于保密的需求，具体架构不能说太细，数据库设计不会涉及，更多的是偏重功能+场景+实现妥协技巧这些容易遗忘的东西</p>
</div>
<h1 id="数据采集点的区别"><a href="#数据采集点的区别" class="headerlink" title="数据采集点的区别"></a>数据采集点的区别</h1><p>数据分析的前提是要懂数据，懂数据的前提就是要知道数据从哪来，是什么样子的，从而可以知道对于得到的数据，那些能做，哪些不能做。不同的采集点，采集到的数据不一样，量有大小的区别，覆盖范围有区别，可以提取出来的特征不一样，因此对于既定的分析目标，可能一个采集点的数据可以轻而易举的完成，而另外一个采集点可能做起来会非常费力，甚或天然的就无法做到。</p>
<p><img src="/2017/03/13/pdns-process-notes/pdns.frame.png" alt=""></p>
<blockquote>
<p>由于懒，我直接抠我在FloCon2017上的talk的PPT的一页来说明。</p>
</blockquote>
<p>上图是一个最简单的DNS请求的全路径。一个用户在运营商提供的一个子网内，发起的DNS请求通过运营商的边界路由，到一个OpenResolver/RecursiveServer，OpenResolver/RecursiveServer 负责完整的递归查询，将最终的IP返回给用户</p>
<h2 id="open-resolver-之上"><a href="#open-resolver-之上" class="headerlink" title="open resolver 之上"></a>open resolver 之上</h2><p>图中的点【1】处。</p>
<p>这里的数据是DNS服务商的递归查询数据。理论上，只有当 </p>
<ul>
<li>一个查询的域名之前没有查询过 </li>
<li>一个已经缓存的域名结果TTL已经过期</li>
</ul>
<p>两种情况下，才会有递归数据产生。</p>
<p>域名的请求永远是大头长尾的数据形态，大部分的查询都会落在缓存中，有效的TTL时间范围内，一般来说，这里的数据量比点【2】处的客户端查询要小2个数量级。</p>
<p>加之一般的DNS服务商都会有基本的数据过滤，不合法的请求，错误的数据包，基本都可以很轻松的清洗掉，所以这里的数据也会比较干净。</p>
<p>数据量小，而且干净，拥有所有的递归过程的数据，因此这里的数据最适合用于构建一个PDNS系统，用以记录历史上domain-ip的映射关系及其变化。</p>
<h2 id="open-resolver-之下"><a href="#open-resolver-之下" class="headerlink" title="open resolver 之下"></a>open resolver 之下</h2><p>图中的点【2】处。</p>
<p>这里的数据包括所有的点【1】的数据，不过数据量至少至少上升了2个数量级。</p>
<p>此外，在这里我们看得到客户端的数据，我们可以知道一个client ip在什么时间请求了什么域名。一个client ip频繁的请求比如cpsc.gov ANY，这极有可能是反射放大。一个client ip请求同一个SLD的不同的子域名，这又分至少两种情况：子域名如果构成比较规律，比如一个单词，那可能是子域名暴力破解；子域名如果构成是杂乱的随机字符串，那可能是RSD攻击。</p>
<p>而且，我们在此还可以知道query数据包中的src port（sport），transaction id（tid）数据。真实的DNS请求都是伴随着随机的sport/tid，因此，在一段时间内，针对同一个domain的所有query，或者一个client发出去的针对任意domain的query，其sport/tid的统计肯定是离散的，当统计显示针对某domain／某client的sport/tid是聚集的时候，我们就有相当大的把握断定这部分数据是伪造的query。</p>
<h2 id="路由器边界"><a href="#路由器边界" class="headerlink" title="路由器边界"></a>路由器边界</h2><p>图中的点【3】处。</p>
<p>乍看起来，点【3】的数据等于把所有点【2】的数据都汇聚到一起。现实的问题在于：1）点【2】的数据都属于各大DNS厂商，这部分数据不可能完全汇总分享 2）正常的用户往往都会使用一个DNS服务器，但是和DNS相关的攻击流量都会和很多的open resolver相关 3）有很多DNS流量和open resolver无关，在点【2】也看不到，因此点【3】是非常必要的。</p>
<p>举例来说，RSD攻击一般来说会通过多个open resolver来打，但是也可能伪造流量直接请求到authoritative server，如果是后者，那在点【2】的位置就完全看不到，但是在点【3】可以看到。</p>
<p>再者，点【3】是client-focused，比如反射放大攻击，一次攻击可能动用上万个open resolver，在点【2】的单个open resolver处很可能被忽略掉，但是点【3】看到的是一个client ip接受来自上万个open resolver的响应，想故意漏掉都比较难吧。</p>
<p>甚或，这里我们可以看到query without response 有去无回数据, response without query无中生有数据，看到一个DNS服务器将任意domain的query响应为一个固定的IP等等，具体有什么用，think～</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>上述三个数据采集点是做DNS数据分析一般的，常规的，最有效的数据采集位置。<strong> 我们很富，我们都有</strong> 。此外前后两端的数据采集点也要注意。</p>
<h3 id="authority-server-边界"><a href="#authority-server-边界" class="headerlink" title="authority server 边界"></a>authority server 边界</h3><p>麻烦各个NS管理员，如果闲了，看看自己的DNS服务器处理的请求都是什么，有没有开泛解析，有没有配置错误将一个权威服务器开启了递归查询功能。我们的数据表明，常被利用的DNS反射节点中，至少2%是开了递归查询功能的权威服务器，无意间就给反射放大攻击添柴助力。</p>
<h3 id="客户端网卡"><a href="#客户端网卡" class="headerlink" title="客户端网卡"></a>客户端网卡</h3><p>说一个场景，用户电脑，没人操作的时候，恶意软件可没闲着，各种可疑的黑网站，DGA这时候都会突兀的出现。</p>
<h3 id="不可说"><a href="#不可说" class="headerlink" title="不可说"></a>不可说</h3><p>实际上，任何可以获取DNS解析记录的地方，其数据可能都有独到可用之处。尤其考虑到数据获取的场景context，简单来说，场景越黑，数据越黑。你有黑场景的数据可分享么？如果有，请联系我～</p>
<hr>
<h1 id="接入点处理"><a href="#接入点处理" class="headerlink" title="接入点处理"></a>接入点处理</h1><p>当前我们的数据在白天忙时平均有700w records/s，record指得是query-response pairing之后提取出来的数据记录。多个数据节点数据并不是平均分配的，最大的点超过150w/s，接入的千兆网卡是打满的状态。针对这么大的数据量，系统架构，或者说数据流设计，都要依赖一个高效稳固的接入和足够灵活的数据分发方式，所以接入点的处理单独拎出来说明一下。</p>
<ul>
<li>sensor：负责原始DNS流量的抓取，解析，配对过程，形成最终的record，然后以hash(client ip/24)为key将数据publish出来</li>
<li>hasher：接受从sensor的record数据，然后以hash(SLD)的形式将数据publish出来</li>
</ul>
<h2 id="应对超大量数据"><a href="#应对超大量数据" class="headerlink" title="应对超大量数据"></a>应对超大量数据</h2><ul>
<li>数据水平切分，client／domain两大维度，后续详细分析</li>
<li>传输使用Zmq，pub/sub模式，单ctx足够</li>
<li>数据格式为protobuf。另：注意所有字段都为optional，不明白原因的去google</li>
<li>批量合并压缩数据，zlib的Z_BEST_SPEED模式下压缩率为30%左右</li>
<li>无锁队列，zmq的push/pull (inproc://addr)。注意，一定是消费者同质的时候才可以。消费者不同质，老老实实上lock-queue，否则一个慢消费者会拖死整个队列</li>
<li>log要异步多线程flush</li>
<li>打点统计尽可能避免锁，可以使用__sync_XXX系列函数，也可以考虑thread::local单独打点，合并dump</li>
</ul>
<h2 id="数据分割"><a href="#数据分割" class="headerlink" title="数据分割"></a>数据分割</h2><p><strong><u>这一点尤为关键</u></strong>，接入的数据量巨大，不可能根据不同的需求重复传输多次，只有水平切分做好，后续的处理过程才能非常方便的扩展。</p>
<p>我的架构里，sensor和hasher作为公共的数据获取接口，其中sensor是以hash(client ip)为key的获取接口，hasher是以hash(SLD)为key的获取接口。</p>
<p>根据需求，如果后续的分析过程是以domain为核心的，那就从hasher来获取，所有*.test.domain都会被分发到一个同一个key下。如果想看某个client ip的情况，那就从sensor直接获取，那同一个client ip的访问行为会集中发布在同一个key上。</p>
<p>提取SLD的过程，不要简单的从后向前数点，com.cn等多级的TLD和com等单级的TLD判断起来会比较麻烦费力。先将所有TLD数据load成为一个trie tree，来的每一条数据，将FQDN从后向前遍历到最深，然后接着遍历到结尾或者下一个.的位置即可，考虑到SLD的长度基本都会在10个字符以内，这样的算法可以认为是O(1)的。</p>
<h2 id="LRU-去重"><a href="#LRU-去重" class="headerlink" title="LRU 去重"></a>LRU 去重</h2><p>DNS原始请求按照域名来看 <strong> 永远是大头长尾 </strong> 的数据形态，top 100网站的访问量占据了所有访问请求的半壁江山，因此一个放置在足够靠前位置的LRU cache，就可以有效的对大头数据进行去重缩量。一个百万size的大小的cache，可以将原始数据缩减一个数量级。</p>
<h2 id="Disposable-domain"><a href="#Disposable-domain" class="headerlink" title="Disposable domain"></a>Disposable domain</h2><p>处理过程的数据量缩减了就OK了么？NO。<br>当前，DNS服务被滥用的非常厉害，很多的域名查询已经不是原始的domain-ip映射关系的作用，有的用来做数据上报，有的用来做request-response服务，还有更多的不知道在干什么。例如：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">141.131.152.01.zen.spamhaus.org</div><div class="line">128.185.146.01.zen.spamhaus.org</div><div class="line">161.101.124.01.zen.spamhaus.org</div><div class="line">125.166.112.01.zen.spamhaus.org</div><div class="line">112.147.171.01.zen.spamhaus.org</div><div class="line">187.115.108.01.zen.spamhaus.org</div><div class="line">115.118.145.01.zen.spamhaus.org</div><div class="line">145.119.155.01.zen.spamhaus.org</div><div class="line"></div><div class="line">2az8s49ydcfmtjk.q13795113801.pw</div><div class="line">2iu5dsf679glqjp.q13795113801.pw</div><div class="line">2icpazfdh3ewl59.q13795113801.pw</div><div class="line">298gc7pfdy5a6jh.q13795113801.pw</div><div class="line">29oiqrcle3ymg4u.q13795113801.pw</div><div class="line">243twlvqkovhmye.q13795113801.pw</div><div class="line">28xmi5p63gskjr9.q13795113801.pw</div><div class="line">27n8pqgihzl6ts9.q13795113801.pw</div><div class="line">257dsqmhzvx3n8w.q13795113801.pw</div><div class="line">27lvywg4t8eocm3.q13795113801.pw</div><div class="line"></div><div class="line">0.209d801.1033.14b4.15c2.3e9b.10.0.00c674b565ce48ea12966d1b82b66522.avqs.mcafee.com</div><div class="line">0.60ab089.41.14b4.15c2.3e9b.10.0.087321142026ece602c83ab04528010c.avqs.mcafee.com</div><div class="line">0.7092081.d960073.14b4.15b4.3e9a.10.0.09f2c55b594c11a6562f932ce8654ef0.avqs.mcafee.com</div><div class="line">0.7091081.1033.14b4.15b4.3e9a.10.0.05441f6ba15c1f633a3968332fe9b9a9.avqs.mcafee.com</div><div class="line">0.400001.d960073.14b4.15a2.3e9a.10.0.0c44e2b096e7c988856103b74d5b4766.avqs.mcafee.com</div><div class="line">0.60fa021.c871031.14b4.15b4.3e9a.10.0.0ac236f269070480252be0b92f545d59.avqs.mcafee.com</div><div class="line">0.70f6801.c051031.14b4.15e0.3e9a.10.0.0c406d44050caac10e17eaa6c33e1f4f.avqs.mcafee.com</div><div class="line">0.70f2008.20033.14b4.15b4.3e9a.10.0.10a2f663fdc511fd52bfcfd0a8837549.avqs.mcafee.com</div><div class="line">x-0.19-23000809.0.16a8.1ff0.6592.200.0.1113g9hwlzvrnims8qbe2ublbi.avqs.mcafee.com</div><div class="line">x-0.19-23000809.0.16a8.1fcd.6592.200.0.1113g9hwlzvrnims8qbe2ublbi.avqs.mcafee.com</div><div class="line"></div><div class="line">123456789123456789.3218721830764663770520984289166039746476607721908141260485540.5020666520264355071788964119716022440607979911188348837802609.11111111111111111111111111111111111111111111111111111111111111.top</div><div class="line">123456789123456789.3218721830764663770520984289166039746476607721908141260485540.5020666520264355071788964119716022440607979911188348837802609.11111111111111111111111111111111111111111111111111111111111111.top</div><div class="line">www.123456789123456789.3218721830764663770520984289166039746476607721908141260485540.5020666520264355071788964119716022440607979911188348837802609.11111111111111111111111111111111111111111111111111111111111111.top</div><div class="line">02609.11111111111111111111111111111111111111111111111111111111111111.top</div><div class="line">123456789123456789.3218721830764663770520984289166039746476607721908141260485540.5020666520264355071788964119716022440607979911188348837802609.11111111111111111111111111111111111111111111111111111111111111.top</div></pre></td></tr></table></figure>
<p>这种“用一次就丢的”域名，可能已经不属于我们想要的domain-ip mapping关系，不在我们想要分析的范围内。<br>现实中，尽管他们占据所有原始请求数据的比例不高，远远比不上top domain的请求量，但是如果按照unique(FQDN)来统计，这些类型的FQDN至少占据了最终入库的70%（刚随手统计了我们新增域名最近一个月的数据。也就是说，这部分数据可能不会对实时处理过程有严重影响，但是对最终的数据集的大小影响比较大。</p>
<p>因此，我们可以选择一个合适的环节丢弃；即便不全部丢弃，也可以采样来降低数据集大小；或者选择性丢弃，只保留例如spamhaus结果为黑的部分。</p>
<h2 id="“阶梯”采样"><a href="#“阶梯”采样" class="headerlink" title="“阶梯”采样"></a>“阶梯”采样</h2><p>但是，并不是所有处理环节都能使用LRU 去重，比如我要统计请求一个特定域名的客户端的分布的时候; 也并不是所有环节都能干掉disposable domain，比如我想看一个client ip都访问了哪些域名的时候。</p>
<p>以前者为例，此时要分析的数据中心就是一个域名，client ip是作为属性存在的，如果全部记录，数据量会非常庞大，但是如果针对全局数据采样，那可能长尾数据就被采丢了，而大头还是大头。正确的做法是，针对要分析的key，domain，对其属性进行采样，例如100个以内的client ip全记录, 100-1000个的时候只记录1/10， 1000个往上只记录1/100。这样，长尾数据会被完好的保留下来，而大头数据会被有效缩减，且能保留它的统计特征。</p>
<hr>
<h1 id="基本架构／数据流"><a href="#基本架构／数据流" class="headerlink" title="基本架构／数据流"></a>基本架构／数据流</h1><h2 id="PDNS-system"><a href="#PDNS-system" class="headerlink" title="PDNS system"></a>PDNS system</h2><p>从hasher开始，接入LRU cache做去重(deduper)，然后</p>
<ul>
<li>cached_count_limit</li>
<li>cached_times_limit</li>
</ul>
<p>两个判定条件将数据pop out(worker)，最终入库 rrset／rdata</p>
<h2 id="real-time-data-query-system"><a href="#real-time-data-query-system" class="headerlink" title="real-time data query system"></a>real-time data query system</h2><p>从hasher开始，接入去掉disposable domain的数据，a.baidu.com -&gt; com.baidu.a .分割，类似trie tree的结构遍历节点存储count(stater)<br>5分钟为时间单位，遍历count tree，把结果入库，形成domain的访问统计</p>
<h2 id="cross-access-system"><a href="#cross-access-system" class="headerlink" title="cross-access system"></a>cross-access system</h2><p>从stater开始，以domain为key对client阶梯采样，可以查询一个client在给定时间都访问过哪些域名，也可以查询一个域名在给定时间都被哪些client访问</p>
<h2 id="real-time-analysis-system"><a href="#real-time-analysis-system" class="headerlink" title="real-time analysis system"></a>real-time analysis system</h2><p>从stater开始，分别对domain/client ip/dns server进行建模统计，实时检测DGA-client, DNS反射放大攻击， RSD攻击，子域名暴力破解等等异常行为</p>
<h2 id="dtree"><a href="#dtree" class="headerlink" title="dtree"></a>dtree</h2><p>dtree存在的意义就是天下无码，这里所有disposable domain都可以去掉。<br>当前我们dtree集群加载数据为百亿FQDN，加上时间类型等基本信息，文件为500G大小，新的FQDN除去disposable domain外产生的速度比较慢，因此这部分数据还是允许都加载到内存的。</p>
<hr>
<h1 id="实时分析处理Points"><a href="#实时分析处理Points" class="headerlink" title="实时分析处理Points"></a>实时分析处理Points</h1><h2 id="归一化及数据预处理"><a href="#归一化及数据预处理" class="headerlink" title="归一化及数据预处理"></a>归一化及数据预处理</h2><ul>
<li>大小写归一化</li>
<li>域名合法性判定，有返回结果的不一定是好域名, 不符合域名规范的也可能是真实使用的域名</li>
<li>rdata排序</li>
<li>response error判定，比如被sinkhole的域名，比如本来是NXDOMAIN但是返回一个劫持IP等情况</li>
</ul>
<h2 id="Profile-domain-client-dnserv"><a href="#Profile-domain-client-dnserv" class="headerlink" title="Profile[domain/client/dnserv]"></a>Profile[domain/client/dnserv]</h2><p>特征越全越好，参考上面不同采集点的数据特点，可利用的数据属性也不一致，不过domain/client/dnserv尽管是不同维度，但是在同样的数据采集点，特征大部分还是相似的。</p>
<p>Profile的意义不仅仅是可以直接判断各种异常，而更重要的意义是做为history snapshot，可以为后续的判断提供证据基础。</p>
<h2 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h2><p>特征除了原始数据，一定要尽可能泛化，len／top／avg／diss／sequ／compose／pattern 各个维度的统计数据在特定场景下可以发挥决定性的作用。</p>
<h2 id="随机程度的度量：熵？"><a href="#随机程度的度量：熵？" class="headerlink" title="随机程度的度量：熵？"></a>随机程度的度量：熵？</h2><p>域名随机性往往都喜欢用熵来做，不过我觉得不好。</p>
<p>域名的作用本意是为了好记，正规的域名往往都是英文单词／词根／拼音／惯用简写的组合，看到一个随机字母的或者数字的，不是dga就是赌博色情这种常常变化的，那为什么不直接来判断域名的组合特征？</p>
<p>所以，做个分词器，动态加载不同的词表就能做各种组合的判断了。拼音就那么几百个，英文词根也很少，单词不要用词典，去搜索一个google top words就很好用了，里面还包含常用的缩略语。一个比较长的串，可能会有多种组合形式，选择的时候，优选覆盖原始字串最长的，次选组合成分最少的，几乎就没错了。</p>
<hr>
<div class="note default"><p>匆匆忙忙，蜻蜓点水，权作备忘。</p>
<p>一个一个子系统的做过来没什么感觉，回顾的时候发现要想写一个全景的流程图PPT都写不下，任何一个子系统的工程实践，几乎都有意料之外的约束。计算机艺术是妥协的艺术，满足了需求的就是好的。</p>
<p>立志成为低碳程序员的我，相当一部分成就感就是来自于“只加需求，不加机器”。</p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从14年中开始，我们团队开始做中国最大的PassiveDNS系统，并在基本的PDNS系统之上，衍生了很多的额外的功能服务。当前我们有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flint: 基本的passive dns系统，domain-ip ip-domain的映射关系的历史记录查询.
    
    </summary>
    
    
      <category term="PDNS" scheme="http://cybatk.com/tags/PDNS/"/>
    
      <category term="DNS" scheme="http://cybatk.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>使用[hexo + github + next]来构建个人博客</title>
    <link href="http://cybatk.com/2017/03/11/hexo-github-blog/"/>
    <id>http://cybatk.com/2017/03/11/hexo-github-blog/</id>
    <published>2017-03-11T14:48:50.000Z</published>
    <updated>2017-03-27T02:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客已经过时许久，不过我年纪渐长，记性渐差，还是需要个这么个东西来记录。<br>之前blog是在自己的vps，不过时不时被gfw干掉，操作不便，学习了下当今潮流，发现hexo+github+next半天就可以搞定，而且足够满足我的需求，于是搞起。</p>
<ul>
<li>hexo；一个基于node的静态博客生成发布引擎，简单来说，就是用户只用写markdown的文稿，后续生成页面、渲染、发布的过程都由hexo来搞定的</li>
<li>github：实际是github的page，静态博客的载体，hexo会将内容发布到用户自己github的page，然后通过page来查看。如果有自己的域名，也可以cname到自己的github的page，这样就能通过自己的域名来访问。</li>
<li>next：只是依赖hexo框架的一个主题样式，比较漂亮，而且还提供根据markdown的标题自动生成outline等辅助功能。</li>
</ul>
<h3 id="hexo的环境配置"><a href="#hexo的环境配置" class="headerlink" title="hexo的环境配置"></a>hexo的环境配置</h3><p>直接贴脚本</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">mkdir your.dir</div><div class="line"><span class="built_in">cd</span> your.dir</div><div class="line"></div><div class="line">npm install hexo-cli --save</div><div class="line">npm install hexo --save</div><div class="line"></div><div class="line">hexo init</div><div class="line"></div><div class="line">npm install hexo-generator-index --save</div><div class="line">npm install hexo-generator-archive --save</div><div class="line">npm install hexo-generator-category --save</div><div class="line">npm install hexo-generator-tag --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-deployer-heroku --save</div><div class="line">npm install hexo-deployer-rsync --save</div><div class="line">npm install hexo-deployer-openshift --save</div><div class="line">npm install hexo-renderer-marked@0.2 --save</div><div class="line">npm install hexo-renderer-stylus@0.2 --save</div><div class="line">npm install hexo-generator-feed@1 --save</div><div class="line">npm install hexo-generator-sitemap@1 --save</div><div class="line">npm install hexo-util --save</div><div class="line">npm install hexo-generator-searchdb --save</div><div class="line"></div><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div><div class="line"></div><div class="line"><span class="built_in">cd</span> themes/next</div><div class="line">npm install</div><div class="line">npm install -g bower</div><div class="line">npm install -g grunt-cli</div><div class="line"><span class="built_in">cd</span> -</div></pre></td></tr></table></figure>
<p>此时，如果所有安装都没有意外，执行 hexo server 就可以启动http服务器在本机4000端口，有一个默认的hello world的主页面</p>
<h3 id="省略github的配置以及github-page的部署过程"><a href="#省略github的配置以及github-page的部署过程" class="headerlink" title="省略github的配置以及github page的部署过程"></a>省略github的配置以及github page的部署过程</h3><h3 id="省略自己域名-到-github-page的映射过程"><a href="#省略自己域名-到-github-page的映射过程" class="headerlink" title="省略自己域名 到 github page的映射过程"></a>省略自己域名 到 github page的映射过程</h3><h3 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h3><p>两个配置文件：<br>1, yourdir/_config.yml: 这个是hexo的配置文件，包括使用哪个主题，这里我们使用next，就需要在该配置中设置。同时，还需要在这里配置要同步到的github page的地址。<br>2, yourdir/themes/next/_config.yml: 这个是主题相关的配置，包括页面布局，第三方评论统计接口等等，看看就明白了<br>3, 我的配置参见：<a href="https://github.com/xuy1202/blog" target="_blank" rel="external">https://github.com/xuy1202/blog</a></p>
<p>注意：<br>    hexo deploy 的时候，是从source文件夹生成为public，然后上传到github。而自己的域名绑定到xxx.github.io的时候，xxx.github.io下面第一级必须有一个CNAME文件对应为自己的域名。所以，必须将对应的CNAME文件放到source一份，这样才能保证每次deploy之后，从自己域名转到github的访问是正确的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客已经过时许久，不过我年纪渐长，记性渐差，还是需要个这么个东西来记录。&lt;br&gt;之前blog是在自己的vps，不过时不时被gfw干掉，操作不便，学习了下当今潮流，发现hexo+github+next半天就可以搞定，而且足够满足我的需求，于是搞起。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://cybatk.com/tags/hexo/"/>
    
      <category term="github" scheme="http://cybatk.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>C++ Tail Call Optimization</title>
    <link href="http://cybatk.com/2017/03/09/C-Tail-Call-Optimization/"/>
    <id>http://cybatk.com/2017/03/09/C-Tail-Call-Optimization/</id>
    <published>2017-03-09T15:39:56.000Z</published>
    <updated>2017-03-27T02:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直没有验证过C++对尾递归的优化，同事讨论起来，写个代码验证下</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tailrecsum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>&amp; running_total)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> running_total;</div><div class="line">    &#125;</div><div class="line">    usleep(<span class="number">100</span>);</div><div class="line">    <span class="comment">// GOOD</span></div><div class="line">    running_total += x;</div><div class="line">    <span class="keyword">return</span> tailrecsum(x - <span class="number">1</span>, running_total);</div><div class="line">    <span class="comment">// BAAD</span></div><div class="line">    <span class="comment">//return x + tailrecsum(x - 1, running_total);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; tailrecsum(<span class="number">10</span>        , r) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; tailrecsum(<span class="number">100</span>       , r) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; tailrecsum(<span class="number">1000</span>      , r) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; tailrecsum(<span class="number">10000</span>     , r) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; tailrecsum(<span class="number">100000</span>    , r) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; tailrecsum(<span class="number">2000000000</span>, r) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码，GOOD的两行就是尾递归模式，BAAD的一行是普通递归的模式<br>如果把usleep睡眠屏蔽，直接g++编译，执行立马会 “Segmentation fault: 11”<br>把usleep放开，会观察到内存持续上升，这就是栈调用占用的内存</p>
<p>但是只要开启了 -O1/2/3 优化模式编译，把usleep屏蔽掉，结果会很快返回（当然，结果是错的，溢出成负数）。把usleep放开，可以观察到内存会恒定不变，此时递归调用不会随着调用过程占用额外的内存。</p>
<p>如果是BAAD的代码，-O1/2/3 编译也是没用的。</p>
<p>结论：</p>
<ul>
<li>编译器能够针对尾递归代码进行执行优化，此时递归调用基本相当于一个循环，前提是要 -O1/2/3 开启编译优化</li>
<li>编译器不会把非尾递归的代码优化成尾递归的效果，绿色低碳程序员请多留心，提高自己姿势水平，代码一小行，烧掉一棵树</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直没有验证过C++对尾递归的优化，同事讨论起来，写个代码验证下&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class
    
    </summary>
    
    
      <category term="cpp" scheme="http://cybatk.com/tags/cpp/"/>
    
      <category term="TCO" scheme="http://cybatk.com/tags/TCO/"/>
    
  </entry>
  
  <entry>
    <title>FloCon 2017</title>
    <link href="http://cybatk.com/2017/01/15/FloCon-2017/"/>
    <id>http://cybatk.com/2017/01/15/FloCon-2017/</id>
    <published>2017-01-15T14:11:00.000Z</published>
    <updated>2017-04-27T10:34:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here is the slide of my talk on <a href="http://www.cert.org/flocon/" target="_blank" rel="external">FloCon 2017</a>.</p>
<div class="note success"><p><strong> DOWNLOAD:  <a href="/2017/01/15/FloCon-2017/BackboneNetworkDRDoSAttackMonitoringAndAnalysis.pdf">Backbone Network DRDoS Attack Monitoring and Analysis.pdf</a> </strong></p>
</div>
<ul>
<li>DRDoS accounts for over 60% of all DDoS, hard to track, annoying bandwidth consumption, larger &amp; larger</li>
<li>DNS ＋ NTP ＋ CharGEN reflection account for over 77% of all DRDoS events</li>
<li>DRDoS amplifiers has been bing used heavily, over 30% of our detected DNS amplifiers are bing used for DRDoS right now</li>
<li>DNS reflection using ANY query, NTP reflection using MONLIST command, CharGEN …, all of little practical use</li>
<li>Kill top amplifiers’ in-traffic, solve the majority problem, no effect to normal network, hands together, let’s DO it.</li>
</ul>
<hr>
<p>Happy time at San Diego.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the slide of my talk on &lt;a href=&quot;http://www.cert.org/flocon/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FloCon 2017&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;not
    
    </summary>
    
    
      <category term="FloCon" scheme="http://cybatk.com/tags/FloCon/"/>
    
      <category term="DRDoS" scheme="http://cybatk.com/tags/DRDoS/"/>
    
      <category term="DDoS" scheme="http://cybatk.com/tags/DDoS/"/>
    
  </entry>
  
  <entry>
    <title>Security Bsides Delaware 2016</title>
    <link href="http://cybatk.com/2016/10/16/Security-Bsides-Delaware-2016/"/>
    <id>http://cybatk.com/2016/10/16/Security-Bsides-Delaware-2016/</id>
    <published>2016-10-16T14:41:11.000Z</published>
    <updated>2017-03-20T17:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here is the slide of my talk on <a href="http://www.bsidesdelaware.com/" target="_blank" rel="external">Security Bsides Delaware 2017</a>.</p>
<div class="note success"><p><strong> DOWNLOAD:  <a href="/2016/10/16/Security-Bsides-Delaware-2016/BackboneNetworkSecurityVisibilityInPractice.pdf">Backbone Network Security Visibility In Practice.pdf</a> </strong></p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the slide of my talk on &lt;a href=&quot;http://www.bsidesdelaware.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Security Bsides Delaware 2017&lt;/a&gt;
    
    </summary>
    
    
      <category term="DDoS" scheme="http://cybatk.com/tags/DDoS/"/>
    
      <category term="Scan" scheme="http://cybatk.com/tags/Scan/"/>
    
      <category term="network security" scheme="http://cybatk.com/tags/network-security/"/>
    
      <category term="security visibility" scheme="http://cybatk.com/tags/security-visibility/"/>
    
  </entry>
  
  <entry>
    <title>DDoS Types</title>
    <link href="http://cybatk.com/2016/05/12/ddos-types/"/>
    <id>http://cybatk.com/2016/05/12/ddos-types/</id>
    <published>2016-05-12T10:27:12.000Z</published>
    <updated>2017-04-13T02:21:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上DDoS攻击类型的说明七零八落，没有一个成体系的类型划分。DDoS攻击，目的都是毁掉“可用性”，那第一考量维度应该就是毁掉的“可用性资源”是什么。其次，攻击发起的位置，也就是协议层次，很重要，这决定了，我们在什么样的位置可以更好的发现对应类型的攻击。任何一个DDoS攻击，一定要能说明白这两个问题，才能说“看到了”这个攻击。</p>
<p>因此，做个表格，从如下两个维度来给常见的DDoS一个合适的位置</p>
<ul>
<li>协议层次: 各种不同网络层级的不同协议</li>
<li>耗费的资源: 带宽，CPU，还是连接，甚或是特定应用的特定弱点？</li>
</ul>
<table>
<thead>
<tr>
<th>LayerProto \ Resources</th>
<th style="text-align:center">Bindwidth</th>
<th style="text-align:right">CPU</th>
<th style="text-align:right">Session/Connection</th>
<th style="text-align:right">Application Specified Weakness</th>
</tr>
</thead>
<tbody>
<tr>
<td>GRE</td>
<td style="text-align:center">GRE_Flood</td>
<td style="text-align:right">GRE_Flood</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td>ICMP</td>
<td style="text-align:center">Ping_Flood; Smurf_Attack</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right">Ping_of_Death</td>
</tr>
<tr>
<td>UDP</td>
<td style="text-align:center">AMP_Flood; UDP_Plain; Fraggle_Attack</td>
<td style="text-align:right">UDP_Plain; Small_Package_Flood</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td>TCP</td>
<td style="text-align:center">SYN_Flood; ACK_Flood</td>
<td style="text-align:right">ACK_Flood</td>
<td style="text-align:right">SYN_Flood; Slow_Read_Attack;</td>
<td style="text-align:right">Teardrop_Attack</td>
</tr>
<tr>
<td>DNS</td>
<td style="text-align:center">DNS_Flood; RSD_Attack</td>
<td style="text-align:right">DNS_Flood; RSD_Attack</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td>HTTP</td>
<td style="text-align:center"></td>
<td style="text-align:right">CC_Flood; SSL_Flood</td>
<td style="text-align:right">Slowloris; RUDY</td>
<td style="text-align:right">CC_Flood; SSL_Flood</td>
</tr>
<tr>
<td>VoIP</td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right">INVITE_of_Death</td>
</tr>
</tbody>
</table>
<p>一句话注释：</p>
<ul>
<li>AMP_Flood: 反射放大，DNS/NTP/CharGen等等，伪造源IP为受害者IP，发送请求流量到反射节点，响应流量就涌向受害者IP，响应包大小远大于请求包大小，是为“放大”</li>
<li>SYN_Flood: 半连接状态，受害者协议栈需要保存大量状态信息，同时，很多会带有payload，顺道消耗带宽</li>
<li>UDP_Plain: 大量UDP包瞬间发往目的IP，阻塞目的链路，包一般很大，当前存在两组攻击者，一组喜欢填充500字节左右，一组喜欢填充1k以上，也有超过1500的，会导致产生0端口Fregment碎片</li>
<li>Small_Package_Flood: 类似UDP_Plain, 不过包一般很小，基本都在50字节以下</li>
<li>ACK_Flood: TCP版本的UDP_Plain, 包大小分布非常相似，但是，除了耗费带宽外，还耗费TCP协议栈针对ack包的的查表操作</li>
<li>DNS_Flood: 伪造大量DNS请求包，发送给DNS cache 服务器或者DNS权威，以期拖垮DNS服务</li>
<li>RSD_Attack: 目的类似DNS_Flood，不过攻击手法是伪造大量随机子域名，响应都是NXDOMAIN，因此就算请求到cache服务器，也可以穿透cache服务器的TTL，间接攻击到权威服务器</li>
<li>CC_Flood: HTTP Flood的别称，具有业务针对性，基本都是找受害者的http响应中最耗费性能的那个链接，比如计算密集的，或者数据库查询比较重的，以此来拖垮服务器</li>
<li>SSL_Flood: SSL协议协商对计算要求较高，因此大量的SSL连接请求，可以直接将SSL接入服务器CPU耗尽</li>
<li>GRE_Flood: GRE是封包协议，大量GRE包，一方面可以消耗带宽，一方面可以耗费解包CPU资源</li>
<li>Ping_Flood: 大量的ping，硬干</li>
<li>Slowloris: 大量HTTP长连接，GET请求但是永远不发送\r\n结束，耗尽服务端连接池</li>
<li>RUDY: 类似Slowloris, 不过是通过设置一个超大的content-length header来构造一个永不停止的POST请求，进而耗费目标服务的连接池</li>
<li>Ping_of_Death: ping的畸形包或者超大包，目标系统重组的时候会由overflow引起的crash</li>
<li>Smurf_Attack: 伪造源IP为要攻击的目标IP，给广播地址发ping，所有的echo就涌向了受害者IP</li>
<li>Fraggle_Attack: UDP版本的Smurf, 使用UDP的端口7（echo）和端口19(CharGEN)</li>
<li>Slow_Read_Attack: 和受害者建立长连接，把TCP receive buffer设置的很小，慢慢读，耗费受害者连接池</li>
<li>Teardrop_Attack: 利用某些操作系统IP碎片重组的bug来使目标系统crash</li>
<li>INVITE_of_Death: 构造SIP INVITE畸形请求包来使目标系统crash</li>
</ul>
<p>上面的分类，是站在“看到攻击”的角度。如果站在“防御攻击”的角度，那下一个DDoS攻击精细化的分类维度应该是“攻击路径”: 是脚本直接发包？还是借助proxy？还是借助反射点？还是通过服务穿透？还是利用Bot？确定了攻击路径，才能找到最合适的防御位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上DDoS攻击类型的说明七零八落，没有一个成体系的类型划分。DDoS攻击，目的都是毁掉“可用性”，那第一考量维度应该就是毁掉的“可用性资源”是什么。其次，攻击发起的位置，也就是协议层次，很重要，这决定了，我们在什么样的位置可以更好的发现对应类型的攻击。任何一个DDoS攻击
    
    </summary>
    
    
      <category term="DDoS" scheme="http://cybatk.com/tags/DDoS/"/>
    
      <category term="network security" scheme="http://cybatk.com/tags/network-security/"/>
    
  </entry>
  
  <entry>
    <title>DDoS检测 - 骨干网与企业安全边界的差异</title>
    <link href="http://cybatk.com/2016/01/14/ddos-backbone-vs-border/"/>
    <id>http://cybatk.com/2016/01/14/ddos-backbone-vs-border/</id>
    <published>2016-01-14T13:52:33.000Z</published>
    <updated>2017-04-27T10:35:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当前我们在做骨干网的DDoS实时检测，用以积累我们security visibility的能力。<br>同样是DDoS检测，在大网上来看和在防护安全边界来来，情况差异比较大，总结一下备忘。</p>
<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><p>检测基于数据，先说数据差异。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>安全边界，几乎可以做全流量分析，而大网上，可获取的几乎只能是流量摘要数据。因此，安全边界可以做更细致的单包深度检测，或者会话重组找渗透，但是大网只能看统计特征。</p>
<h2 id="Point-View-vs-Scape-View"><a href="#Point-View-vs-Scape-View" class="headerlink" title="Point View vs. Scape View"></a>Point View vs. Scape View</h2><p>企业看到针对自己这个点的数据，大网看的是整体。设定两个数量集规模M和N，M比N大2个数量级，安全边界看到的是M：N， 大网看到的是M：M。<br>因此，大网背景流量大很多，意味着噪音大很多，意味着很多即便是大攻击，但是淹没在更巨大的背景流量下，反而很小了，需要耗费更大的精力来定位分析。<br>但是大网的大背景流量在某些场景下也有优势，比如企业很难发现或者确认scanner，但是大网上由于自己的Scape View，确认Scanner反而简单。</p>
<h2 id="Full-Data-vs-Partial-Data"><a href="#Full-Data-vs-Partial-Data" class="headerlink" title="Full Data vs. Partial Data"></a>Full Data vs. Partial Data</h2><p>企业安全边界对应Full Data很容易理解。大网上，Partial Data有两层含义：<br>1, 大网上看到针对一个IP的流量，只能是整体数据的一部分：很多我们采集点之外的数据我们是看不到的，更多大网采集点层级之下的数据我们也是看不到的<br>2，是进出数据的一边：在大网骨干路由上，来去的流量不一定是经过同一个地方，因此大网上某个点常常会看到单向流量</p>
<p>由于DDoS攻击流量基本上是全网窜，因此1带来的困难只是检测精细化的工程难度，2带来的更难处理，因为单向流量直接影响到了判定，看到一个IP只接受RST包，怎么确定这是RST Flood还是它是被Spoofed IP来SYN_ACK Flood攻击别人呢？</p>
<h1 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h1><h2 id="Manage-Object／管理对象／资源／业务对象"><a href="#Manage-Object／管理对象／资源／业务对象" class="headerlink" title="Manage Object／管理对象／资源／业务对象"></a>Manage Object／管理对象／资源／业务对象</h2><p>企业都会有自己的资源／业务梳理，大网是没有的，我们当前可用的只有PDNS带给我们的domain-IP的映射关系，但是由于有CDN的存在，这个也存在部分问题。</p>
<h2 id="Baseline"><a href="#Baseline" class="headerlink" title="Baseline"></a>Baseline</h2><p>企业既然可以梳理出MO，那也就可以根据MO来确定一个baseline，流量大小的也好，访问态势的也好，总有能力刻画一个常态的profile，但是大网监控，第一不可能有一个可梳理的baselien，第二，大网上异常太多，业务故障／业务调整／网络异常／攻击等等情况时刻都在发生，就算有baseline，那超出baseline部分的异常，仍旧是多到难以处理，所以有了baseline也要丢掉，直接去看数据中的强特征更靠谱。</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><h2 id="看到-vs-防住"><a href="#看到-vs-防住" class="headerlink" title="看到 vs. 防住"></a>看到 vs. 防住</h2><p>企业安全防护，工作的衡量标准就是自己保护对象的可用性，当攻击发生时能不能防住。<br>既然以保护对象的可用性作为最终衡量标准，那基本上都是抓大放小，告警基线可以根据自己资源能力来调整一个比较高的阈值，小攻击，探测性的攻击，能忽略就忽略，毕竟这些事情的处理也是要耗费安全运营的资源，大到可能影响业务的攻击一旦发生，那势必立即响应，以求安全。</p>
<p>我们做大网上的监控，更多的是想“看到”，大小都想看到。而且，更普遍的情况是，我们看到的小，只是因为我们的数据不全，只是在我们可见的范围内小，而实际攻击并不小。因此，我们看攻击没有“大小”的区别，只有“看到和看不到”的区别，我们要尽可能的“全看到”。</p>
<p>于此带来的一个最典型的工程处理方法上的区别就是，安全边界的TopN更重要，而大网监控的SpikeRate更重要，TopN突出的是当前面对的最大的是谁，SpikeRate表达的是变化最大的是谁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当前我们在做骨干网的DDoS实时检测，用以积累我们security visibility的能力。&lt;br&gt;同样是DDoS检测，在大网上来看和在防护安全边界来来，情况差异比较大，总结一下备忘。&lt;/p&gt;
&lt;h1 id=&quot;数据&quot;&gt;&lt;a href=&quot;#数据&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="DDoS" scheme="http://cybatk.com/tags/DDoS/"/>
    
      <category term="nework security" scheme="http://cybatk.com/tags/nework-security/"/>
    
  </entry>
  
  <entry>
    <title>大数据，机器学习，网络安全</title>
    <link href="http://cybatk.com/2015/10/07/big-data-and-machine-learning/"/>
    <id>http://cybatk.com/2015/10/07/big-data-and-machine-learning/</id>
    <published>2015-10-07T14:15:35.000Z</published>
    <updated>2017-04-07T04:41:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些阶段性的看法：</p>
<ul>
<li>大数据，大在两个方面: 数量 和 维度</li>
<li>单单数量大，不算真正的大数据，数据简单，特征简单，量的问题可以通过硬件资源的堆叠和各种优化算法的提升来解决</li>
<li>维度的爆炸，带来的问题是数据特征难以被人把握，特定数据对应的特征的组合更隐蔽，更难以被人发现，需要更深入的专家知识和经验</li>
<li>机器学习是为了应对维度的爆炸，顺带要搞定数据量的大，单单因为数据量大就上机器学习是错误的</li>
<li>机器学习是黑箱，只能告诉我们是什么，而不能告知为什么，网络安全是非黑即白，必须要有为什么，有天然的矛盾存在</li>
<li>情况0: 机器学习学习正常，作为数据过滤通道，而不是异常检测方式</li>
<li>情况1: 机器学习解决大数据中初筛的功能，作为前置探测存在，产出各种可疑数据，但不是结果数据，后续还是有专家验证</li>
<li>情况2：机器学习只作用在特定场景，产出有专家验证的可控的漏报误报，直接产出最终结果</li>
<li>对信息安全行业整体而言，当前的壁垒还没到大数据，信息采集监控还没做好，基础做的差的很远，机器学习PR需求强于实际需求</li>
<li>对信息安全特定方向而言，机器学习已经开始发挥作用</li>
<li>机器学习应用到网络安全大数据的关键点： 去噪 &amp; 可验证。去噪好坏体现工程难度，决定后续工程难度，决定最终产出；验证是落地的必须环节。没法去噪，可以小步試错；没法验证，不要做</li>
<li>机器学习，一方面解决的是人对大数据的无力，另一方面解决的是专家的知识壁垒。有些行业的专家要小心了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些阶段性的看法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大数据，大在两个方面: 数量 和 维度&lt;/li&gt;
&lt;li&gt;单单数量大，不算真正的大数据，数据简单，特征简单，量的问题可以通过硬件资源的堆叠和各种优化算法的提升来解决&lt;/li&gt;
&lt;li&gt;维度的爆炸，带来的问题是数据特征难以被人把握
    
    </summary>
    
    
      <category term="network security" scheme="http://cybatk.com/tags/network-security/"/>
    
      <category term="big data" scheme="http://cybatk.com/tags/big-data/"/>
    
      <category term="machine learning" scheme="http://cybatk.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>crontab notes</title>
    <link href="http://cybatk.com/2015/09/24/crontab-notes/"/>
    <id>http://cybatk.com/2015/09/24/crontab-notes/</id>
    <published>2015-09-24T15:20:43.000Z</published>
    <updated>2019-04-29T08:00:29.798Z</updated>
    
    <content type="html"><![CDATA[<p>为了监控系统，在crontab里设置了几条命令，自己测试怎么都好使，但是放在crontab里就是不执行。</p>
<p>查看/var/log/cron可以看到执行记录，但是结果不是期望的，都要怀疑操作系统了。请教了一个运维老司机，原来知道是环境变量的原因。</p>
<p>我的监控命令用到了一个lsof，手动执行ok，但是crontab里面执行的时候是找不到的，需要设置PATH或者使用绝对路径。</p>
<p>搜索“cron 环境变量 坑爹”有好多结果，我就不重复了。</p>
<p>另外一个需要注意的是，crontab执行命令会默认将执行输出发用户邮箱，日积月累邮箱也会爆，所以命令一定记得 &gt;/dev/null 2&gt;&amp;1 重定向。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了监控系统，在crontab里设置了几条命令，自己测试怎么都好使，但是放在crontab里就是不执行。&lt;/p&gt;
&lt;p&gt;查看/var/log/cron可以看到执行记录，但是结果不是期望的，都要怀疑操作系统了。请教了一个运维老司机，原来知道是环境变量的原因。&lt;/p&gt;
&lt;p&gt;我
    
    </summary>
    
    
      <category term="crontab" scheme="http://cybatk.com/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>c++ 通过 frind 来获取一个类的 private 成员变量</title>
    <link href="http://cybatk.com/2015/03/16/c-frind-get-private-value/"/>
    <id>http://cybatk.com/2015/03/16/c-frind-get-private-value/</id>
    <published>2015-03-16T10:46:38.000Z</published>
    <updated>2017-03-27T02:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>有个朋友问到一个给定的不可变的类，且是安装好的三方库，不能改代码，不能重新编译，想获取其私有变量，有什么方法？<br>答案是友元～</p>
<p>lib头文件 t.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> P&#123;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> private_string;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        P();</div><div class="line"></div><div class="line">    <span class="comment">//friend class G;    // ADD THIS LINE</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>lib代码 t.cc<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"t.h"</span></span></div><div class="line"></div><div class="line">P::P():private_string(<span class="string">"private_string"</span>)&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面两个文件编译为libt。注意这时候上面friend是屏蔽掉的，因为我们假定原始给定的头文件没有友元。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[xuamao@xuamaos-MacBook-Pro:~/qdev/<span class="built_in">test</span>]$ g++ -c <span class="_">-f</span>PIC t.cc -o t.o</div><div class="line">[xuamao@xuamaos-MacBook-Pro:~/qdev/<span class="built_in">test</span>]$ g++ -shared -o libt.so t.o</div></pre></td></tr></table></figure></p>
<p>我们自己的测试代码m.cc<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"t.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> G&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">get_private</span><span class="params">(<span class="keyword">const</span> P&amp; p)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> p.private_string;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    P p;</div><div class="line">    G g;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; g.get_private(p) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时如果不把上述friend行打开，直接编译会报错：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[xuamao@xuamaos-MacBook-Pro:~/qdev/<span class="built_in">test</span>]$ g++ m.cc <span class="_">-lt</span> -L./</div><div class="line">m.cc:6:18: error: <span class="string">'private_string'</span> is a private member of <span class="string">'P'</span></div><div class="line">        <span class="built_in">return</span> p.private_string;</div><div class="line">                 ^</div><div class="line">./t.h:5:21: note: declared private here</div><div class="line">        std::string private_string;</div><div class="line">                    ^</div><div class="line">1 error generated.</div></pre></td></tr></table></figure></p>
<p>这是符合预期的，因为就是要测试friend行代码的效用嘛～打开后就能正常编译执行。<br>我的测试环境是mac+clang，如果是linux＋g++，最后编译可执行文件时需要增加运行期lib查找路径 -Wl,-rpath=./</p>
<p>总结：</p>
<ul>
<li>class的private/protected权限是编译期的行为，提供的是编译期的内存获取权限的检查，编译完成后就没有任何约束了</li>
<li>因此，我们想要获取一个给定对象的私有变量，是我们自己代码编译时期的权限检查，只要保证自己代码编译时有friend来放开权限即可</li>
</ul>
<div class="note warning"><p>如果给定一个类，对于其私有成员变量，直接get有时候可以理解，绝不要直接set，在不知道原本class实现的前提下，极有可能会破坏其内部实现的逻辑</p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有个朋友问到一个给定的不可变的类，且是安装好的三方库，不能改代码，不能重新编译，想获取其私有变量，有什么方法？&lt;br&gt;答案是友元～&lt;/p&gt;
&lt;p&gt;lib头文件 t.h&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
    
    </summary>
    
    
      <category term="cpp" scheme="http://cybatk.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>劫持tshark使其更方便的和我们自有系统交互</title>
    <link href="http://cybatk.com/2015/03/11/wireshark-tshark-hijack/"/>
    <id>http://cybatk.com/2015/03/11/wireshark-tshark-hijack/</id>
    <published>2015-03-11T10:52:01.000Z</published>
    <updated>2017-03-27T02:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="劫持tshark解包接口"><a href="#劫持tshark解包接口" class="headerlink" title="劫持tshark解包接口"></a>劫持tshark解包接口</h2><hr>
<p>wireshark是一款伟大的工具，tshark是wireshark的命令行工具，具有丰富的功能。<br>但是tshark只能将数据包抓取解析并按照既定格式打印出来，没办法做更自由的数据格式，比如把特定数据形成Porotobuf格式，也没法对外交互，比如发送到某个socket等。</p>
<p>So，let‘s make it.</p>
<p>简单说一下环境：</p>
<ul>
<li>Centos6</li>
<li>wireshark-1.10.8 源码</li>
</ul>
<p>要劫持接口，那就追代码，hark源码的结构可以在其他地方找到更详细的剖析，我们只需要知道以下几个点：</p>
<ul>
<li>各种协议包的解析在wireshark-1.10.8/epan/dissectors/ 下面</li>
<li>根据协议解包是个顺序的调用的过程，比如epan/dissectors/packet-ip.c中解析完IP协议，然后调用epan/dissectors/packet-udp.c来解析UDP协议，依次往后，直至没有新协议数据需要解析为止</li>
<li>协议包数据解析完是一个proto_tree结构，这棵树的添加构造在epan/proto.c中，上面的dissector都会掉用proto.c中的方法来将解析出来的数据添加到树中</li>
<li>注意一个header_field_info结构，内部成员name是展示的名字， abbrev是解析包过程中用到的过滤名字，比如ip.src udp.dstport等，还有一个type标识对应的value应该是什么数据</li>
<li>proto.c设置数据的时候，会调用5个基本类型的数据设置方法 fvalue_set fvalue_set_sinteger fvalue_set_uinteger fvalue_set_integer64 fvalue_set_floating，代码在epan/ftypes/ftypes.c</li>
</ul>
<p>数据流收缩的最小的口径就是在ftypes.c中，从这里入手才能最小代码的改动来劫持到所有数据。但是这里的函数获取到的只有value，而我们需要key和value都能一一对应上，因此还需要在调用者proto.c上动点手脚。</p>
<hr>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><ol>
<li>创建如下文件shark_hijack.h</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hijack_call</span><span class="params">(field_info *fi)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(! fi) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* finfo_name   = fi-&gt;hfinfo-&gt;name;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* finfo_abbrev = fi-&gt;hfinfo-&gt;abbrev;</div><div class="line">    <span class="keyword">int</span> finfo_type = (fi-&gt;hfinfo) ? fi-&gt;hfinfo-&gt;type : FT_NONE;</div><div class="line">    <span class="keyword">switch</span> (finfo_type) &#123;</div><div class="line">        <span class="comment">// do your work here, you can get setted value like:</span></div><div class="line">        <span class="comment">// fvalue_get(&amp;fi-&gt;value)</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set(i ...) do&#123;           \</span></div><div class="line">    fvalue_set(i);                      \</div><div class="line">    hijack_call(fi);                    \</div><div class="line">&#125;while(0)                               \</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set_uinteger(i ...) do&#123;  \</span></div><div class="line">    fvalue_set_uinteger(i);             \</div><div class="line">    hijack_call(fi);                    \</div><div class="line">&#125;while(0)                               \</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set_sinteger(i ...) do&#123;  \</span></div><div class="line">    fvalue_set_sinteger(i);             \</div><div class="line">    hijack_call(fi);                    \</div><div class="line">&#125;while(0)                               \</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set_integer64(i ...) do&#123; \</span></div><div class="line">    fvalue_set_integer64(i);            \</div><div class="line">    hijack_call(fi);                    \</div><div class="line">&#125;while(0)                               \</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set_floating(i ...) do&#123;  \</span></div><div class="line">    fvalue_set_floating(i);             \</div><div class="line">    hijack_call(fi);                    \</div><div class="line">&#125;while(0)                               \</div></pre></td></tr></table></figure>
<ol>
<li>将上述文件放在epan/ftypes/文件夹下，然后在epan/proto.c原文件最后一行include之后添加，如下行</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ftypes/shark_hijack.h"</span></span></div></pre></td></tr></table></figure>
<ol>
<li>这样，将原始的5个设置方法以宏的形式替换，在原始操作之后，调用hijack_call，将整个field_info指针传递过去，这里我们就能获取到name abbrev value，就可以根据自己的需求做些想做的事情了。这样的完整的样例可以在 <a href="https://github.com/xuy1202/xylibs/tree/master/tshark_wrap" target="_blank" rel="external">https://github.com/xuy1202/xylibs/tree/master/tshark_wrap</a> 看到</li>
</ol>
<hr>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>上面的方法最简单，但是需要在hijack_call中做类型判断，我们可以将修改面扩大一点，但是整体上更简单</p>
<ol>
<li>将上述shark_hijack.h修改为如下，还是用宏劫持的方式</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shark_id_dispatch_string</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span>* val)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shark_id_dispatch_int32</span><span class="params">(<span class="keyword">int</span> id, gint32 val)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shark_id_dispatch_uint32</span><span class="params">(<span class="keyword">int</span> id, guint32 val)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shark_id_dispatch_uint64</span><span class="params">(<span class="keyword">int</span> id, guint64 val)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shark_id_dispatch_double</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">double</span> val)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set(i ...) do&#123;           \</span></div><div class="line">    shark_id_dispatch_string(fi-&gt;hfinfo-&gt;id, fvalue_set(i)); \</div><div class="line">&#125;while(0)                               \</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set_uinteger(i ...) do&#123;  \</span></div><div class="line">    shark_id_dispatch_uint32(fi-&gt;hfinfo-&gt;id, fvalue_set_uinteger(i)); \</div><div class="line">&#125;while(0)                               \</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set_sinteger(i ...) do&#123;  \</span></div><div class="line">    shark_id_dispatch_int32(fi-&gt;hfinfo-&gt;id, fvalue_set_sinteger(i)); \</div><div class="line">&#125;while(0)                               \</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set_integer64(i ...) do&#123; \</span></div><div class="line">    shark_id_dispatch_uint64(fi-&gt;hfinfo-&gt;id, fvalue_set_integer64(i)); \</div><div class="line">&#125;while(0)                               \</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fvalue_set_floating(i ...) do&#123;  \</span></div><div class="line">    shark_id_dispatch_double(fi-&gt;hfinfo-&gt;id, fvalue_set_floating(i)); \</div><div class="line">&#125;while(0)                               \</div></pre></td></tr></table></figure>
<ol>
<li>原始的fvalue_set等5个函数返回类型为void，我们要修改为接受value的类型，并将valuereturn出来，比如修改fvalue_set为如下</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gpointer                                                              <span class="comment">// 将void换成接受的value的类型</span></div><div class="line">fvalue_set(<span class="keyword">fvalue_t</span> *fv, gpointer value, gboolean already_copied)</div><div class="line">&#123;</div><div class="line">    g_assert(fv-&gt;ftype-&gt;set_value);</div><div class="line">    fv-&gt;ftype-&gt;set_value(fv, value, already_copied);</div><div class="line">    <span class="keyword">return</span> value;                                                      <span class="comment">// 这里是修改的return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>这样，我们就将value直接分类型转给了我们自己声明的shark_id_dispatch_string等5个方法, 我们可以在另外一个动态库中实现这5个方法，然后修改Makefile链接起来，这样以后只需要修改我们自己的so就能达到修改逻辑的目的</p>
</li>
<li><p>tricky的地方注意到了么，我们没有name，没有abbrev，而只有一个fi-&gt;hfinfo-&gt;id。这个id其实是thark编译的时候根据各个解包器生成的固定的id，如果在proto.c的proto_register_field_init函数return之前添加一行</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"proto_register_field_init: %d-&gt;%s\n"</span>, hfinfo-&gt;id, hfinfo-&gt;abbrev);</div></pre></td></tr></table></figure>
<p>编译执行开始，总能看到id和abbrev的固定映射关系，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">proto_register_field_init: 20587-&gt;dns.id</div><div class="line">proto_register_field_init: 20588-&gt;dns.qry.type</div><div class="line">proto_register_field_init: 20589-&gt;dns.qry.class</div><div class="line">proto_register_field_init: 20590-&gt;dns.qry.class</div><div class="line">proto_register_field_init: 20591-&gt;dns.qry.qu</div></pre></td></tr></table></figure>
<p>因此，这样的映射表只需要知道，然后就完全可以根据id来做自己的逻辑了。</p>
<hr>
<p>Wish you happy, go nuts!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;劫持tshark解包接口&quot;&gt;&lt;a href=&quot;#劫持tshark解包接口&quot; class=&quot;headerlink&quot; title=&quot;劫持tshark解包接口&quot;&gt;&lt;/a&gt;劫持tshark解包接口&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;wireshark是一款伟大的工具，tshark是
    
    </summary>
    
    
      <category term="wireshark" scheme="http://cybatk.com/tags/wireshark/"/>
    
      <category term="tshark" scheme="http://cybatk.com/tags/tshark/"/>
    
  </entry>
  
  <entry>
    <title>hexo+next主题的markdown示范样例备忘</title>
    <link href="http://cybatk.com/2015/01/01/markdown+example/"/>
    <id>http://cybatk.com/2015/01/01/markdown+example/</id>
    <published>2014-12-31T16:00:00.000Z</published>
    <updated>2017-03-27T08:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">link:</div><div class="line"> - http://cybatk.com/   &lt;!-- 修改title的链接 --&gt;</div><div class="line"></div><div class="line">photos:</div><div class="line"> - http://wx3.sinaimg.cn/mw690/6c4e11d1ly1fdwwlmkoehj212w1mc12f.jpg</div><div class="line"> - http://wx4.sinaimg.cn/mw690/6c4e11d1ly1fdwwlk2kg9j212w1mcgux.jpg</div><div class="line"><span class="section"> - http://wx1.sinaimg.cn/mw690/6c4e11d1ly1fdwwlnrrrhj212w1mc7cg.jpg</span></div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><p>这篇blog没有干货，所以一上来就得有点趣味</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% centerquote %&#125;</div><div class="line">这篇blog没有干货，所以一上来就得有点趣味</div><div class="line">&#123;% endcenterquote %&#125;</div></pre></td></tr></table></figure>
<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://umbrella.cisco.com/blog/wp-content/themes/umbrella-blog/img/default/ArticleImage_11_banner.jpg" class="full-image" alt="alttttttttt" title="titttttttttttle"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% fullimage https://umbrella.cisco.com/blog/wp-content/themes/umbrella-blog/img/default/ArticleImage<span class="emphasis">_11_</span>banner.jpg, alttttttttt, titttttttttttle %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>!!!: hexo tag doc </p>
<footer><strong>@xuy1202</strong><cite><a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">hexo.io/docs/tag-plugins.html</a></cite></footer></blockquote>
<hr>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>
<hr>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote>
<hr>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<h1 id="Head1"><a href="#Head1" class="headerlink" title="Head1"></a>Head1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h1 id="Head2"><a href="#Head2" class="headerlink" title="Head2"></a>Head2</h1><h2 id="sub-title"><a href="#sub-title" class="headerlink" title="sub title"></a>sub title</h2><h2 id="sub-title-1"><a href="#sub-title-1" class="headerlink" title="sub title"></a>sub title</h2><blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
<div class="note default"><p>default </p>
</div>
<div class="note primary"><p>primary </p>
</div>
<div class="note success"><p>success </p>
</div>
<div class="note info"><p>info    </p>
</div>
<div class="note warning"><p>warning </p>
</div>
<div class="note danger"><p>danger  </p>
</div>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% note default %&#125; default &#123;% endnote %&#125;</div><div class="line">&#123;% note primary %&#125; primary &#123;% endnote %&#125;</div><div class="line">&#123;% note success %&#125; success &#123;% endnote %&#125;</div><div class="line">&#123;% note info    %&#125; info    &#123;% endnote %&#125;</div><div class="line">&#123;% note warning %&#125; warning &#123;% endnote %&#125;</div><div class="line">&#123;% note danger  %&#125; danger  &#123;% endnote %&#125;</div></pre></td></tr></table></figure>
<!--
![](/images/touxiang.jpg)
<span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/touxiang.jpg" class="full-image" alt="alt" title="title" /><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<p>–&gt;</p>
-->]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;
    
    </summary>
    
    
  </entry>
  
</feed>
